#!/usr/bin/env python3
"""
üß™ AI Expert Consultant Test Suite
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö AI Expert ‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ï‡πà‡∏≤‡∏á‡πÜ
"""

import asyncio
import json
import sys
from pathlib import Path

# Add parent directory to path
sys.path.append(str(Path(__file__).parent))

from ai_chat_backend import ai_expert_consultant

async def test_expert_recommendations():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ Libraries ‡πÅ‡∏•‡∏∞ Tech Stack"""
    
    print("üß™ Testing Expert Recommendations...")
    
    test_cases = [
        {
            "input": "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ UI library ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö React ‡∏´‡∏ô‡πà‡∏≠‡∏¢",
            "expected_type": "recommendation"
        },
        {
            "input": "‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ color palette ‡∏™‡∏ß‡∏¢‡πÜ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏õ E-commerce",  
            "expected_type": "design_advice"
        },
        {
            "input": "‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏π React component ‡∏ô‡∏µ‡πâ‡∏´‡∏ô‡πà‡∏≠‡∏¢",
            "expected_type": "code_review" 
        },
        {
            "input": "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏≠‡∏õ‡∏£‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡πÅ‡∏ü ‡∏°‡∏µ login order payment",
            "expected_type": "project_analysis"
        }
    ]
    
    for i, test in enumerate(test_cases, 1):
        print(f"\n--- Test Case {i} ---")
        print(f"Input: {test['input']}")
        
        try:
            result = await ai_expert_consultant(test['input'], "analyze")
            
            print(f"‚úÖ Success!")
            print(f"Consultation Type: {result.get('consultation_type', 'N/A')}")
            print(f"Response Mode: {result.get('response_mode', 'N/A')}")
            print(f"Ready to Build: {result.get('ready_to_build', False)}")
            print(f"Needs More Info: {result.get('needs_more_info', False)}")
            
            if result.get('expert_recommendations'):
                print("üí° Expert Recommendations:")
                for rec in result['expert_recommendations'][:3]:
                    print(f"  ‚Ä¢ {rec}")
            
            if result.get('expert_analysis', {}).get('modern_libraries'):
                print("üìö Modern Libraries:")
                for lib in result['expert_analysis']['modern_libraries'][:3]:
                    print(f"  ‚Ä¢ {lib}")
                    
        except Exception as e:
            print(f"‚ùå Error: {e}")

async def test_code_review():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ Code Review"""
    
    print("\nüß™ Testing Code Review...")
    
    code_examples = [
        {
            "input": "‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏π code ‡∏ô‡∏µ‡πâ‡∏´‡∏ô‡πà‡∏≠‡∏¢: function add(a, b) { return a + b; }",
            "type": "simple_function"
        },
        {
            "input": "‡∏ä‡πà‡∏ß‡∏¢‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á React component ‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°",
            "type": "react_component"  
        }
    ]
    
    for example in code_examples:
        print(f"\nTesting: {example['type']}")
        try:
            result = await ai_expert_consultant(example['input'], "analyze")
            
            if result.get('code_suggestions'):
                suggestions = result['code_suggestions']
                print("üîß Code Suggestions:")
                
                if suggestions.get('improvements'):
                    print("  Improvements:")
                    for imp in suggestions['improvements'][:2]:
                        print(f"    ‚Ä¢ {imp}")
                
                if suggestions.get('best_practices'):
                    print("  Best Practices:")
                    for bp in suggestions['best_practices'][:2]:
                        print(f"    ‚Ä¢ {bp}")
                        
        except Exception as e:
            print(f"‚ùå Error: {e}")

async def test_ui_design_advice():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ Design"""
    
    print("\nüß™ Testing UI Design Advice...")
    
    design_questions = [
        "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏õ Banking",
        "‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ typography ‡∏ó‡∏µ‡πà‡∏î‡∏π‡πÇ‡∏°‡πÄ‡∏î‡∏¥‡∏£‡πå‡∏ô", 
        "‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö button ‡∏™‡∏ß‡∏¢‡πÜ"
    ]
    
    for question in design_questions:
        print(f"\nQuestion: {question}")
        try:
            result = await ai_expert_consultant(question, "analyze")
            
            if result.get('expert_analysis', {}).get('design_system'):
                design = result['expert_analysis']['design_system']
                print("üé® Design System:")
                for key, value in design.items():
                    if isinstance(value, str):
                        print(f"  {key}: {value}")
                        
        except Exception as e:
            print(f"‚ùå Error: {e}")

async def main():
    """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    
    print("üß† AI Expert Consultant Test Suite")
    print("=" * 50)
    
    try:
        await test_expert_recommendations()
        await test_code_review() 
        await test_ui_design_advice()
        
        print("\n" + "=" * 50)
        print("‚úÖ All tests completed!")
        print("\nüí° Next Steps:")
        print("1. ‡πÄ‡∏õ‡∏¥‡∏î http://localhost:8000/ai_expert_demo.html")
        print("2. ‡∏Ñ‡∏•‡∏¥‡∏Å '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö AI Expert'")
        print("3. ‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ")
        
    except Exception as e:
        print(f"\n‚ùå Test Suite Error: {e}")

if __name__ == "__main__":
    asyncio.run(main())