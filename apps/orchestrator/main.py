import os, json
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any, Optional

from fastapi import FastAPI, HTTPException, WebSocket, WebSocketDisconnect
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel, Field
from slugify import slugify
from openai import OpenAI

# Load environment variables
from dotenv import load_dotenv
load_dotenv()

# Import our new chat system
from agents.chat_manager import initialize_chat_manager, get_chat_manager
from agents.conversational_ai import ConversationalAI

# Import new systems  
from agents.activity_monitor import activity_monitor, log_activity, start_task, complete_task, log_agent_action
from agents.conversational_design_agent import ConversationalDesignAgent
from agents.requirement_analyzer import RequirementAnalyzer
from agents.supervisor_agent import supervisor_agent
from agents.conversational_flow import conversation_flow
from agents.ai_mobile_app_generator import initialize_ai_mobile_generator

WEBROOT = Path(os.getenv("WEBROOT", "/app/workspace/generated-app/apps/web"))
WEBROOT.mkdir(parents=True, exist_ok=True)

MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")
API_KEY = os.getenv("OPENAI_API_KEY")
if not API_KEY:
    raise RuntimeError("OPENAI_API_KEY is required (no fallback / no templates).")
client = OpenAI(api_key=API_KEY)

# Initialize chat manager with our new system
initialize_chat_manager(client)

# Initialize requirement analysis system
requirement_analyzer = RequirementAnalyzer(client)
conversational_agent = ConversationalDesignAgent(client)

# Initialize AI Mobile App Generator
ai_mobile_generator = initialize_ai_mobile_generator(client)

app = FastAPI(title="AgentPro Orchestrator (AI Mode Only)")
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:8080", "http://127.0.0.1:8080", "*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Mount static files for generated websites
app.mount("/app", StaticFiles(directory=WEBROOT), name="static")

@app.get("/health")
async def health_check():
    """Health check endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö system monitoring"""
    return {
        "status": "healthy",
        "service": "AgentPro Orchestrator", 
        "timestamp": datetime.now().isoformat(),
        "version": "2.0.0",
        "agents": {
            "conversational_ai": "active",
            "chat_manager": "initialized",
            "multi_agent_system": "ready"
        }
    }

@app.websocket("/ws/activity")
async def websocket_activity(websocket: WebSocket):
    """WebSocket endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö real-time activity monitoring"""
    await activity_monitor.connect_websocket(websocket)
    try:
        while True:
            # ‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å client (ping/pong)
            data = await websocket.receive_text()
            if data == "ping":
                await websocket.send_text("pong")
    except WebSocketDisconnect:
        activity_monitor.disconnect_websocket(websocket)

class ChatReq(BaseModel):
    message: str = Field(min_length=2)

class ChatResp(BaseModel):
    ok: bool
    slug: str
    web_url: str
    files: List[str]

# New Enterprise Models
class EnterpriseChatReq(BaseModel):
    message: str = Field(min_length=2)
    history: Optional[List[str]] = []
    request_type: Optional[str] = "professional_project"

class EnterpriseChatResp(BaseModel):
    ok: bool
    response: str
    workflow_id: Optional[str] = None
    project_type: Optional[str] = None
    project_urls: Optional[List[str]] = []
    deployment_info: Optional[Dict[str, Any]] = None
    professional_grade: bool = True

SYSTEM = """
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ AI Website Designer & Developer ‡∏£‡∏∞‡∏î‡∏±‡∏ö Expert ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô
‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà: ‡∏™‡∏£‡πâ‡∏≤‡∏á "‡∏ä‡∏∏‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå" ‡∏ï‡∏≤‡∏° requirement ‡πÇ‡∏î‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ:

üé® DESIGN REQUIREMENTS:
- Modern responsive design
- Beautiful color schemes ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏ò‡∏µ‡∏°
- Professional typography (Google Fonts)
- Smooth animations & transitions
- Mobile-first approach
- Professional gradients & shadows

üìù CONTENT REQUIREMENTS:
- AI-generated ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á
- SEO-optimized headings
- Compelling call-to-actions  
- Professional imagery placeholders
- Real business information (‡πÅ‡∏°‡πâ‡∏à‡∏∞ mock data)
- Complete sections: Hero, About, Services/Products, Contact, Footer

**‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô** ‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏™‡∏Ñ‡∏µ‡∏°‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πä‡∏∞:
{
  "slug": "myapp-YYYYMMDD-HHMMSS",
  "files": [
    {"path":"index.html","content":"<!doctype html>..."},
    {"path":"styles.css","content":"..."},
    {"path":"script.js","content":"..."}
  ]
}

üö® CRITICAL REQUIREMENTS:
- index.html ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô 5+ sections
- styles.css ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ modern CSS, animations, responsive design
- script.js ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ interactive features
- ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ (‡πÄ‡∏ß‡πâ‡∏ô‡πÅ‡∏ï‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏∑‡πà‡∏ô)
- ‡πÉ‡∏™‡πà <meta charset="utf-8"> ‡πÅ‡∏•‡∏∞ <meta name="viewport"> ‡∏Ñ‡∏£‡∏ö
- HTML ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á CSS/JS ‡πÅ‡∏ö‡∏ö relative path
- NO explanations, NO markdown, NO code fences - JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!
"""

def _ask_ai_to_plan(user_msg: str) -> Dict[str, Any]:
    rsp = client.chat.completions.create(
        model=MODEL,
        temperature=0.3,
        response_format={"type":"json_object"},
        messages=[
            {"role":"system", "content": SYSTEM},
            {"role":"user", "content": user_msg}
        ],
    )
    txt = rsp.choices[0].message.content
    try:
        data = json.loads(txt)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"AI returned non-JSON: {e}")

    # validate
    if "slug" not in data or "files" not in data or not isinstance(data["files"], list):
        raise HTTPException(status_code=422, detail="AI JSON missing required fields")

    # ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö slug
    slug = data["slug"].strip()
    if not slug or not slug.startswith("myapp-"):
        slug = "myapp-" + datetime.now().strftime("%Y%m%d-%H%M%S")
        data["slug"] = slug

    # ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏°‡∏µ index.html + styles.css
    paths = { (f.get("path") or "").lower() for f in data["files"] if isinstance(f, dict) }
    if "index.html" not in paths or "styles.css" not in paths:
        raise HTTPException(status_code=422, detail="AI must provide at least index.html and styles.css")

    return data

def _write_files(plan: Dict[str, Any]) -> List[str]:
    slug = plan["slug"]
    outdir = WEBROOT / slug
    outdir.mkdir(parents=True, exist_ok=True)

    written: List[str] = []
    for f in plan["files"]:
        if not isinstance(f, dict): continue
        rel = (f.get("path") or "").lstrip("/").strip()
        content = f.get("content") or ""
        if not rel:
            continue
        p = outdir / rel
        p.parent.mkdir(parents=True, exist_ok=True)
        p.write_text(content, encoding="utf-8")
        written.append(str(p))
    if not (outdir / "index.html").exists():
        raise HTTPException(status_code=500, detail="index.html missing after write")
    return written

@app.get("/health")
def health():
    return {"ok": True, "webroot": str(WEBROOT), "model": MODEL}

class ChatRequest(BaseModel):
    message: str = Field(min_length=1)
    conversation_id: Optional[str] = None

class ChatResponse(BaseModel):
    response: str
    needs_clarification: bool = False
    preview_url: Optional[str] = None
    code: Optional[str] = None
    project_ready: bool = False

@app.post("/api/chat", response_model=ChatResponse)
async def chat_with_analyzer(req: ChatRequest):
    """New chat endpoint using requirement analyzer"""
    
    log_agent_action("ChatAPI", f"Received message: {req.message[:50]}...")
    
    # Use requirement analyzer
    analyzer = requirement_analyzer
    analysis = analyzer.analyze_initial_request(req.message)
    
    if analysis.needs_clarification:
        log_agent_action("RequirementAnalyzer", "Asking for clarification")
        return ChatResponse(
            response=analysis.clarification_questions[0] if analysis.clarification_questions else "‡∏ä‡πà‡∏ß‡∏¢‡∏ö‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?",
            needs_clarification=True
        )
    
    # If enough info, proceed with conversational agent
    design_agent = conversational_agent
    conv_analysis = design_agent.analyze_request(req.message)
    
    if conv_analysis.get("needs_clarification", False):
        questions = conv_analysis.get("conversational_questions", [])
        response_text = questions[0] if questions else design_agent.generate_conversational_response(req.message)
        
        log_agent_action("ConversationalAgent", "Generated response")
        return ChatResponse(
            response=response_text,
            needs_clarification=True
        )
    
    # Ready to generate code
    log_agent_action("CodeGeneration", "Starting code generation")
    plan = _ask_ai_to_plan(req.message.strip())
    files = _write_files(plan)
    slug = plan["slug"]
    web_url = f"/app/{slug}/index.html"
    
    log_agent_action("CodeGeneration", f"Generated project: {slug}")
    
    return ChatResponse(
        response=f"üéâ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ '{slug}' ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏î‡∏π‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà preview ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤",
        needs_clarification=False,
        preview_url=web_url,
        project_ready=True
    )

@app.post("/chat/ai", response_model=ChatResp)
def chat_ai(req: ChatReq):
    """Enhanced web generation with real-time progress tracking"""
    
    # Log start of generation
    log_agent_action("WebGenerator", f"üöÄ Starting AI web generation for: {req.message[:50]}...")
    
    # Step 1: AI Planning
    log_agent_action("WebGenerator", "üìù AI is analyzing requirements...")
    plan = _ask_ai_to_plan(req.message.strip())
    
    # Log what AI planned
    log_agent_action("WebGenerator", f"üé® AI planned website: {plan['slug']}")
    log_agent_action("WebGenerator", f"üìÅ Files to create: {[f.get('path', '') for f in plan['files']]}")
    
    # Step 2: File Creation
    log_agent_action("WebGenerator", "üíæ Creating files...")
    files = _write_files(plan)
    
    slug = plan["slug"]
    web_url = f"/app/{slug}/index.html"
    
    # Log completion
    log_agent_action("WebGenerator", f"‚úÖ Website created successfully! Preview: {web_url}")
    
    return ChatResp(ok=True, slug=slug, web_url=web_url, files=[f"/app/{slug}/{Path(f).name}" for f in files])

@app.websocket("/ws")
@app.websocket("/ws/chat")
async def websocket_chat_endpoint(websocket: WebSocket):
    """Streaming chat endpoint for smooth UI experience with conversation memory"""
    
    await websocket.accept()
    log_agent_action("WebSocket", "Connected successfully")
    
    # Store conversation context for this connection
    conversation_history = []
    project_context = {}
    
    try:
        while True:
            # Receive message from client
            data = await websocket.receive_json()
            message = data.get("message", "").strip()
            
            if not message:
                continue
                
            log_agent_action("WebSocket", f"Received: {message[:50]}...")
            
            # Add to conversation history
            conversation_history.append({"role": "user", "content": message})
            
            # Send typing indicator
            await websocket.send_json({
                "type": "typing",
                "message": "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£..."
            })
            
            # Let AI handle everything - decide when to chat vs when to code
            full_context = "\n".join([f"{msg['role']}: {msg['content']}" for msg in conversation_history])
            
            # Send to OpenAI to decide what to do
            try:
                response = client.chat.completions.create(
                    model="gpt-4o-mini",
                    messages=[{
                        "role": "system", 
                        "content": """‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô AI assistant ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô

‡∏´‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö: ‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ ‡∏ñ‡∏≤‡∏°‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î
‡∏´‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß: 
- ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå: "CREATE_WEBSITE:" ‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏£‡∏∏‡∏õ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
- ‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô: "CREATE_APP:" ‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏£‡∏∏‡∏õ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ

‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:
- ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå: landing page, company profile, portfolio, blog
- ‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô: todo app, calculator, booking system, dashboard, management system

‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
- ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå: "CREATE_WEBSITE: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡πÅ‡∏ü 'Cafe Modern' ‡∏°‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å ‡πÄ‡∏°‡∏ô‡∏π‡∏Å‡∏≤‡πÅ‡∏ü ‡∏£‡∏≤‡∏Ñ‡∏≤ ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà"
- ‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô: "CREATE_APP: ‡∏™‡∏£‡πâ‡∏≤‡∏á todo app ‡∏°‡∏µ add/delete/edit tasks, category, deadline, responsive design"

‡∏ï‡∏≠‡∏ö‡πÅ‡∏Ñ‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏≠‡∏¢‡πà‡∏≤‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°"""
                    }, {
                        "role": "user",
                        "content": full_context
                    }],
                    max_tokens=200,
                    temperature=0.7
                )
                
                ai_response = response.choices[0].message.content.strip()
                
                # Check if AI wants to create website/app
                if ai_response.startswith("CREATE_WEBSITE:") or ai_response.startswith("CREATE_APP:"):
                    # Extract project description and type
                    if ai_response.startswith("CREATE_APP:"):
                        project_desc = ai_response.replace("CREATE_APP:", "").strip()
                        project_type = "app"
                    else:
                        project_desc = ai_response.replace("CREATE_WEBSITE:", "").strip()
                        project_type = "website"
                    
                    # Dynamic status based on project type
                    if project_type == "app":
                        status_steps = [
                            {"msg": "üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô...", "progress": 5},
                            {"msg": "üéØ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå user requirements...", "progress": 15},
                            {"msg": "üèóÔ∏è ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö app architecture...", "progress": 25},
                            {"msg": "üîß ‡∏™‡∏£‡πâ‡∏≤‡∏á backend API endpoints...", "progress": 40},
                            {"msg": "üé® ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö UI/UX components...", "progress": 55},
                            {"msg": "üì± ‡∏™‡∏£‡πâ‡∏≤‡∏á responsive interface...", "progress": 70},
                            {"msg": "üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ frontend ‡∏Å‡∏±‡∏ö backend...", "progress": 85},
                            {"msg": "üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞ optimize performance...", "progress": 95}
                        ]
                    else:
                        status_steps = [
                            {"msg": "üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå...", "progress": 10},
                            {"msg": "ü§ñ AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á...", "progress": 30},
                            {"msg": "üé® ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö layout ‡πÅ‡∏•‡∏∞ styling...", "progress": 50},
                            {"msg": "üìù ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô content ‡πÅ‡∏•‡∏∞ components...", "progress": 70},
                            {"msg": "üîß ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° preview...", "progress": 90}
                        ]
                    
                    # Send initial status updates
                    for step in status_steps[:-1]:
                        await websocket.send_json({
                            "type": "status",
                            "message": step["msg"],
                            "status": "processing",
                            "progress": step["progress"]
                        })
                    
                    plan = _ask_ai_to_plan(project_desc)
                    
                    # Detailed file creation with realistic delays
                    await websocket.send_json({
                        "type": "status",
                        "message": f"ÔøΩ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ {len(plan['files'])} ‡πÑ‡∏ü‡∏•‡πå...", 
                        "status": "creating_files",
                        "progress": 75
                    })
                    
                    # Show file creation progress
                    for i, file_info in enumerate(plan["files"]):
                        filename = file_info.get("path", f"file_{i}")
                        file_type = filename.split('.')[-1] if '.' in filename else "file"
                        
                        # Different icons for different file types
                        icon_map = {
                            "html": "üåê", "css": "üé®", "js": "‚ö°", 
                            "py": "üêç", "json": "üìã", "md": "üìù"
                        }
                        icon = icon_map.get(file_type, "üìÑ")
                        
                        await websocket.send_json({
                            "type": "status",
                            "message": f"{icon} ‡∏™‡∏£‡πâ‡∏≤‡∏á {filename}...",
                            "status": "writing_file", 
                            "progress": 75 + (i * 15 // len(plan["files"]))
                        })
                        
                    files = _write_files(plan)
                    slug = plan["slug"]
                    web_url = f"/app/{slug}/index.html"
                    
                    # Final status
                    await websocket.send_json({
                        "type": "status",
                        "message": status_steps[-1]["msg"],
                        "status": "finalizing",
                        "progress": status_steps[-1]["progress"]
                    })
                    
                    # Complete with project type-specific message
                    complete_msg = f"üéâ ‡∏™‡∏£‡πâ‡∏≤‡∏á{'‡πÅ‡∏≠‡∏õ' if project_type == 'app' else '‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå'} '{slug}' ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!"
                    
                    await websocket.send_json({
                        "type": "message", 
                        "message": complete_msg,
                        "preview_url": web_url,
                        "project_ready": True,
                        "slug": slug,
                        "project_type": project_type,
                        "status": "complete",
                        "progress": 100
                    })
                    
                    log_agent_action("WebSocket", f"Generated {project_type}: {slug}")
                    
                    # Reset for next project
                    conversation_history = []
                    
                else:
                    # Continue conversation
                    await websocket.send_json({
                        "type": "message",
                        "message": ai_response,
                        "needs_clarification": True
                    })
                    
                    # Add AI response to history
                    conversation_history.append({"role": "assistant", "content": ai_response})
                    
            except Exception as e:
                await websocket.send_json({
                    "type": "message",
                    "message": "‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?",
                    "needs_clarification": True
                })
                log_agent_action("WebSocket", f"AI Error: {e}")
                
    except WebSocketDisconnect:
        log_agent_action("WebSocket", "Client disconnected")
    except Exception as e:
        log_agent_action("WebSocket", f"Error: {e}")
        await websocket.send_json({
            "type": "error",
            "message": f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"
        })

@app.post("/simple-chat")
async def simple_chat(request: dict):
    """üöÄ Production-Ready AI Chat with Multi-Agent System"""
    message = request.get("message", "")
    user_id = request.get("user_id", "default_user")
    
    try:
        print(f"üí¨ Processing: {message}")
        
        # ‡πÉ‡∏ä‡πâ Advanced Conversational Flow
        response_data = await conversation_flow.process_conversation(
            user_id=user_id, 
            message=message,
            context={"session": "simple_chat"}
        )
        
        print(f"üéØ Intent detected: {response_data.get('intent_detected', {})}")
        
        # ‡∏ñ‡πâ‡∏≤ AI ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå
        if response_data.get("should_start_workflow", False):
            print("üé™ Starting Autonomous Workflow!")
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏° Multi-Agent Workflow
            workflow_id = await supervisor_agent.start_autonomous_workflow(message)
            print(f"üöÄ Workflow started: {workflow_id}")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏Ç‡∏±‡πâ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (Real-time Preview)
            preview_html = await create_instant_preview(message)
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            slug = f"instant-{timestamp}"
            output_dir = WEBROOT / slug
            output_dir.mkdir(parents=True, exist_ok=True)
            
            (output_dir / "index.html").write_text(preview_html, encoding="utf-8")
            
            return {
                "response": response_data["message"] + f"\n\nüöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß! Workflow ID: {workflow_id}",
                "website_url": f"http://localhost:8001/app/{slug}/index.html",
                "workflow_id": workflow_id,
                "status": "workflow_started"
            }
        
        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
        return {
            "response": response_data["message"],
            "intent": response_data.get("intent_detected", {}),
            "confidence": response_data.get("confidence", 0.8)
        }
        
    except Exception as e:
        print(f"üí• Error: {e}")
        return {"response": f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"}

async def create_instant_preview(user_request: str) -> str:
    """‡∏™‡∏£‡πâ‡∏≤‡∏á Preview ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏î‡∏π"""
    
    # ‡πÉ‡∏ä‡πâ OpenAI ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML ‡∏à‡∏£‡∏¥‡∏á‡πÜ
    try:
        client = OpenAI(api_key=API_KEY)
        
        prompt = f"""
        ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå HTML ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏Ç‡∏≠: "{user_request}"
        
        ‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î:
        - HTML5 ‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
        - CSS ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô (internal) 
        - ‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå Google Fonts
        - Responsive Design
        - ‡∏™‡∏µ‡∏™‡∏±‡∏ô‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
        - Animation ‡πÄ‡∏ö‡∏≤‡πÜ
        - ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠
        - ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
        
        ‡∏ï‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏Ñ‡πâ‡∏î HTML ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô:
        """
        
        response = client.chat.completions.create(
            model=MODEL,
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
            max_tokens=2000
        )
        
        html_content = response.choices[0].message.content.strip()
        
        # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÇ‡∏Ñ‡πâ‡∏î
        if "```html" in html_content:
            html_content = html_content.split("```html")[1].split("```")[0].strip()
        elif "```" in html_content:
            html_content = html_content.split("```")[1].strip()
        
        return html_content
        
    except Exception as e:
        print(f"Error generating HTML: {e}")
        # Fallback HTML
        return f"""<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏Å AI</title>
    <link href="https://fonts.googleapis.com/css2?family=Kanit:wght@300;400;600&display=swap" rel="stylesheet">
    <style>
        * {{ margin: 0; padding: 0; box-sizing: border-box; }}
        body {{ 
            font-family: 'Kanit', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }}
        .container {{ 
            text-align: center;
            padding: 2rem;
            background: rgba(255,255,255,0.1);
            border-radius: 20px;
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 32px rgba(0,0,0,0.3);
        }}
        h1 {{ 
            font-size: 3rem; 
            margin-bottom: 1rem;
            animation: fadeInUp 1s ease;
        }}
        p {{ 
            font-size: 1.2rem; 
            margin-bottom: 2rem;
            opacity: 0.9;
            animation: fadeInUp 1s ease 0.2s both;
        }}
        .feature {{ 
            background: rgba(255,255,255,0.1);
            padding: 1rem;
            margin: 1rem 0;
            border-radius: 10px;
            animation: fadeInUp 1s ease 0.4s both;
        }}
        @keyframes fadeInUp {{
            from {{ opacity: 0; transform: translateY(30px); }}
            to {{ opacity: 1; transform: translateY(0); }}
        }}
    </style>
</head>
<body>
    <div class="container">
        <h1>üöÄ AI ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!</h1>
        <p>‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏Ç‡∏≠: "{user_request}"</p>
        <div class="feature">
            <h3>‚ú® ‡∏£‡∏∞‡∏ö‡∏ö Multi-Agent ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</h3>
            <p>AI ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏£‡πà‡∏ß‡∏°‡∏°‡∏∑‡∏≠‡∏Å‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì</p>
        </div>
        <div class="feature">
            <h3>üé® ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</h3>
            <p>‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡∏µ‡πÑ‡∏ã‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</p>
        </div>
        <div class="feature">
            <h3>üîß ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û</h3>
            <p>‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏≤‡∏¢‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö</p>
        </div>
    </div>
</body>
</html>"""

# üè¢ ENTERPRISE ENDPOINTS
@app.post("/enterprise-chat", response_model=EnterpriseChatResp)
async def enterprise_chat(req: EnterpriseChatReq):
    """Enterprise-grade AI chat for professional projects"""
    try:
        log_activity("enterprise_chat_request", {
            "message": req.message,
            "request_type": req.request_type,
            "history_length": len(req.history or [])
        })
        
        # Import Enterprise Generator
        from agents.enterprise_generator import enterprise_generator
        
        # Phase 1: Analyze requirements thoroughly  
        print(f"üè¢ Enterprise Chat Request: {req.message}")
        analysis = await enterprise_generator.analyze_requirements_thoroughly(req.message)
        
        project_type = analysis.get("project_type", "professional_website")
        complexity = analysis.get("estimated_complexity", "medium")
        
        # Phase 2: Generate professional response
        response_message = f"""üè¢ <strong>Enterprise Analysis Complete!</strong>

üìä <strong>Project Type:</strong> {project_type}
üìà <strong>Complexity:</strong> {complexity}
‚è∞ <strong>Timeline:</strong> {analysis.get('estimated_timeline', '2-4 weeks')}

üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏° <strong>Multi-Agent Workflow</strong> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡∏£‡∏∞‡∏î‡∏±‡∏ö Professional...

‚ú® <strong>Features ‡∏à‡∏∞‡∏£‡∏ß‡∏°:</strong>
‚Ä¢ Multiple pages with professional design
‚Ä¢ Working functionality & interactions  
‚Ä¢ Database integration (if needed)
‚Ä¢ Responsive & mobile-friendly
‚Ä¢ SEO optimized
‚Ä¢ Production-ready code

‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡πâ..."""

        # Phase 3: Start Enterprise Workflow
        workflow_id = await supervisor_agent.start_autonomous_workflow(req.message)
        
        # Phase 4: Quick preview (if simple enough)
        project_urls = []
        deployment_info = None
        
        if complexity == "simple":
            try:
                # Generate quick preview for simple projects
                if project_type in ["professional_website", "landing_page"]:
                    project_structure = await enterprise_generator.generate_professional_website(analysis)
                    deployment_info = await enterprise_generator.deploy_project(
                        project_structure,
                        f"preview_{project_type}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                    )
                    project_urls = list(deployment_info.get("urls", {}).values())
            except Exception as e:
                print(f"Quick preview failed: {e}")
        
        return EnterpriseChatResp(
            ok=True,
            response=response_message,
            workflow_id=workflow_id,
            project_type=project_type,
            project_urls=project_urls,
            deployment_info=deployment_info,
            professional_grade=True
        )
        
    except Exception as e:
        log_activity("enterprise_chat_error", {"error": str(e)})
        return EnterpriseChatResp(
            ok=False,
            response=f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Enterprise: {str(e)}",
            professional_grade=False
        )

# Endpoint ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Workflow
@app.get("/workflow-status/{workflow_id}") 
async def get_workflow_status(workflow_id: str):
    """‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Enterprise Workflow"""
    try:
        # Get status from supervisor agent
        if hasattr(supervisor_agent, 'workflow_results') and workflow_id in supervisor_agent.workflow_results:
            result = supervisor_agent.workflow_results[workflow_id]
            return {
                "workflow_id": workflow_id,
                "status": result.get("status", "unknown"),
                "project_type": result.get("project_type"),
                "professional_grade": result.get("professional_grade", False),
                "deployment_info": result.get("deployment_info"),
                "completed_at": result.get("completed_at"),
                "error": result.get("error")
            }
        else:
            return {
                "workflow_id": workflow_id,
                "status": "in_progress",
                "message": "Workflow is still running..."
            }
    except Exception as e:
        return {
            "workflow_id": workflow_id,
            "status": "error", 
            "error": str(e)
        }

# Endpoint ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
@app.get("/latest-projects")
async def get_latest_projects():
    """‡∏î‡∏π‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á"""
    try:
        projects = []
        for item in WEBROOT.glob("**/index.html"):
            if item.parent.name.startswith(("instant-", "auto-")):
                projects.append({
                    "name": item.parent.name,
                    "url": f"http://localhost:8001/app/{item.parent.name}/index.html",
                    "created": item.stat().st_mtime
                })
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        projects.sort(key=lambda x: x["created"], reverse=True)
        return {"projects": projects[:10]}  # 10 ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        
    except Exception as e:
        return {"error": str(e)}
            
    except Exception as e:
        return {"response": f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"}

@app.get("/api/chat/status")
def get_chat_status():
    """Get chat system status"""
    chat_mgr = get_chat_manager()
    return {
        "active_users": chat_mgr.get_active_users(),
        "user_sessions": chat_mgr.get_user_sessions(),
        "system_status": "operational"
    }

# üì± MOBILE APP API ENDPOINTS

class MobileAppReq(BaseModel):
    message: str = Field(min_length=2, description="‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÅ‡∏≠‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á")
    app_type: Optional[str] = Field(default="react_native", description="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏≠‡∏õ: react_native, flutter, ionic")
    project_name: Optional[str] = Field(default=None, description="‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå")
    features: Optional[List[str]] = Field(default=[], description="‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£")

class MobileAppResp(BaseModel):
    success: bool
    message: str
    app_type: Optional[str] = None
    project_path: Optional[str] = None
    project_name: Optional[str] = None
    business_name: Optional[str] = None
    files_created: Optional[int] = None
    install_commands: Optional[List[str]] = None
    run_commands: Optional[List[str]] = None
    error: Optional[str] = None

@app.post("/api/mobile-app", response_model=MobileAppResp)
async def create_mobile_app(req: MobileAppReq):
    """üöÄ ‡∏™‡∏£‡πâ‡∏≤‡∏á Mobile Application (React Native, Flutter, Ionic)"""
    try:
        log_activity("mobile_app_request", {
            "message": req.message,
            "app_type": req.app_type,
            "project_name": req.project_name,
            "features": req.features
        })
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á requirements
        import re
        from datetime import datetime
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏≠‡∏õ
        detected_type = "react_native"  # default
        if "flutter" in req.message.lower():
            detected_type = "flutter"
        elif "ionic" in req.message.lower():
            detected_type = "ionic"
        
        app_type = req.app_type or detected_type
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå
        if req.project_name:
            project_name = req.project_name
        else:
            # ‡∏™‡∏Å‡∏±‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            name_patterns = [
                r'‡πÅ‡∏≠‡∏õ([^‡∏ó‡∏µ‡πà]*?)(?:‡∏ó‡∏µ‡πà|‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö|$)',
                r'‡∏™‡∏£‡πâ‡∏≤‡∏á([^‡∏ó‡∏µ‡πà]*?)(?:‡πÅ‡∏≠‡∏õ|app)',
                r'([^‡∏ó‡∏µ‡πà]*?)(?:‡πÅ‡∏≠‡∏õ|app)'
            ]
            
            project_name = "mobile_app"
            for pattern in name_patterns:
                match = re.search(pattern, req.message)
                if match:
                    name = match.group(1).strip()
                    if name and len(name) > 1:
                        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô project name ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
                        name_map = {
                            '‡∏£‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡πÅ‡∏ü': 'coffee_shop',
                            '‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£': 'restaurant', 
                            '‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•': 'hospital',
                            '‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô': 'school',
                            '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£': 'banking',
                            '‡∏≠‡∏µ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏¥‡∏£‡πå‡∏ã': 'ecommerce',
                            '‡∏ä‡πâ‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á': 'shopping'
                        }
                        project_name = name_map.get(name, name.replace(' ', '_').lower())
                        break
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° timestamp
            timestamp = datetime.now().strftime("%Y%m%d_%H%M")
            project_name = f"{project_name}_{timestamp}"
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á business name
        business_name = req.message
        if '‡πÅ‡∏≠‡∏õ' in req.message:
            business_name = req.message.replace('‡∏™‡∏£‡πâ‡∏≤‡∏á', '').replace('‡πÅ‡∏≠‡∏õ', '').strip()
        
        if not business_name or len(business_name) < 3:
            business_name = "My Mobile App"
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á requirements
        requirements = {
            'app_type': app_type,
            'project_name': project_name,
            'business_name': business_name,
            'description': req.message,
            'features': req.features or ['navigation', 'responsive_ui', 'modern_design']
        }
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Mobile App Generator
        print(f"üì± Creating {app_type} app: {business_name}")
        result = await ai_mobile_generator.generate_mobile_app(requirements)
        
        if result['success']:
            log_activity("mobile_app_created", {
                "project_name": result['project_name'],
                "app_type": result['app_type'],
                "files_created": result['files_created']
            })
            
            return MobileAppResp(
                success=True,
                message=result['message'],
                app_type=result['app_type'],
                project_path=result['project_path'],
                project_name=result['project_name'],
                business_name=result['business_name'],
                files_created=result['files_created'],
                install_commands=result['install_commands'],
                run_commands=result['run_commands']
            )
        else:
            return MobileAppResp(
                success=False,
                message=result['message'],
                error=result.get('error', 'Unknown error')
            )
            
    except Exception as e:
        log_activity("mobile_app_error", {"error": str(e)})
        return MobileAppResp(
            success=False,
            message=f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Mobile App: {str(e)}",
            error=str(e)
        )

@app.get("/api/mobile-apps")
async def list_mobile_apps():
    """üì± ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Mobile Apps ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß"""
    try:
        import os
        from pathlib import Path
        
        workspace = Path("C:/agent/workspace")
        mobile_apps = []
        
        if workspace.exists():
            for item in workspace.iterdir():
                if item.is_dir():
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Mobile App Project ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    indicators = [
                        item / "package.json",     # React Native
                        item / "pubspec.yaml",     # Flutter
                        item / "App.tsx",          # React Native
                        item / "lib" / "main.dart" # Flutter
                    ]
                    
                    is_mobile_app = any(indicator.exists() for indicator in indicators)
                    
                    if is_mobile_app:
                        app_type = "unknown"
                        if (item / "package.json").exists():
                            app_type = "react_native"
                        elif (item / "pubspec.yaml").exists():
                            app_type = "flutter"
                        
                        # ‡∏≠‡πà‡∏≤‡∏ô README ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                        readme_path = item / "README.md"
                        description = "Mobile Application"
                        if readme_path.exists():
                            try:
                                with open(readme_path, 'r', encoding='utf-8') as f:
                                    content = f.read()
                                    lines = content.split('\n')
                                    if len(lines) > 2:
                                        description = lines[2] if lines[2].strip() else description
                            except:
                                pass
                        
                        mobile_apps.append({
                            "name": item.name,
                            "app_type": app_type,
                            "description": description,
                            "path": str(item),
                            "created": item.stat().st_mtime
                        })
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        mobile_apps.sort(key=lambda x: x["created"], reverse=True)
        return {"mobile_apps": mobile_apps}
        
    except Exception as e:
        return {"error": str(e), "mobile_apps": []}

if __name__ == "__main__":
    import uvicorn
    print("üöÄ Starting AgentPro Orchestrator...")
    print("üìä API Documentation: http://localhost:8001/docs")
    print("üîç Health Check: http://localhost:8001/health")
    uvicorn.run(app, host="0.0.0.0", port=8001)
