"""
üéØ Supervisor Agent - ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ô‡∏á‡∏≤‡∏ô Multi-Agent System
"""

import asyncio
import json
from datetime import datetime
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
from enum import Enum

class TaskStatus(Enum):
    PENDING = "pending"
    IN_PROGRESS = "in_progress"
    TESTING = "testing"
    FAILED = "failed"
    COMPLETED = "completed"

class AgentType(Enum):
    REQUIREMENT_ANALYZER = "requirement_analyzer"
    DESIGN_AGENT = "design_agent"
    CODE_GENERATOR = "code_generator"
    QUALITY_TESTER = "quality_tester"
    DEPLOYER = "deployer"

@dataclass
class Task:
    id: str
    type: str
    description: str
    requirements: Dict[str, Any]
    status: TaskStatus
    assigned_agent: Optional[str] = None
    created_at: datetime = None
    completed_at: Optional[datetime] = None
    result: Optional[Dict[str, Any]] = None
    error: Optional[str] = None

class SupervisorAgent:
    def __init__(self):
        self.tasks: Dict[str, Task] = {}
        self.agents: Dict[str, Any] = {}
        self.workflow_queue: List[str] = []
        self.max_concurrent_tasks = 3
        self.quality_standards = {
            "min_test_coverage": 90,
            "max_errors": 0,
            "performance_threshold": 2.0,  # seconds
            "accessibility_score": 85
        }
        
    async def start_autonomous_workflow(self, user_request: str) -> str:
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ - Enterprise Grade"""
        print(f"üéØ Supervisor: Starting ENTERPRISE autonomous workflow for: {user_request}")
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Professional Project ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        is_professional = await self._analyze_professional_requirements(user_request)
        
        if is_professional:
            print("üè¢ ENTERPRISE MODE: Creating Professional-Grade Project")
            
            # Import Enterprise Generator
            from .enterprise_generator import enterprise_generator
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á Enterprise Task Chain
            task_chain = await self._create_enterprise_task_chain(user_request)
            workflow_id = f"enterprise_workflow_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô Enterprise Workflow
            asyncio.create_task(self._execute_enterprise_workflow(workflow_id, task_chain, user_request))
        else:
            print("üìã STANDARD MODE: Creating Simple Project")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á Standard Task Chain
            task_chain = await self._create_task_chain(user_request)
            workflow_id = f"workflow_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô Background
            asyncio.create_task(self._execute_workflow(workflow_id, task_chain))
        
        return workflow_id
    
    async def _create_task_chain(self, user_request: str) -> List[Task]:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥"""
        tasks = []
        
        # Task 1: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        tasks.append(Task(
            id="req_analysis",
            type="requirement_analysis",
            description="Analyze user requirements and create specification",
            requirements={"user_request": user_request},
            status=TaskStatus.PENDING,
            created_at=datetime.now()
        ))
        
        # Task 2: ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
        tasks.append(Task(
            id="system_design",
            type="system_design",
            description="Create system architecture and UI/UX design",
            requirements={"depends_on": "req_analysis"},
            status=TaskStatus.PENDING,
            created_at=datetime.now()
        ))
        
        # Task 3: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î
        tasks.append(Task(
            id="code_generation",
            type="code_generation", 
            description="Generate HTML, CSS, JavaScript code",
            requirements={"depends_on": "system_design"},
            status=TaskStatus.PENDING,
            created_at=datetime.now()
        ))
        
        # Task 4: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û
        tasks.append(Task(
            id="quality_testing",
            type="quality_testing",
            description="Run comprehensive quality tests",
            requirements={"depends_on": "code_generation"},
            status=TaskStatus.PENDING,
            created_at=datetime.now()
        ))
        
        # Task 5: Deploy ‡πÅ‡∏•‡∏∞ Preview
        tasks.append(Task(
            id="deployment",
            type="deployment",
            description="Deploy to preview environment",
            requirements={"depends_on": "quality_testing"},
            status=TaskStatus.PENDING,
            created_at=datetime.now()
        ))
        
        return tasks
    
    async def _execute_workflow(self, workflow_id: str, tasks: List[Task]):
        """‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ Workflow ‡πÅ‡∏ö‡∏ö Autonomous"""
        print(f"üöÄ Supervisor: Executing workflow {workflow_id}")
        
        # ‡πÄ‡∏Å‡πá‡∏ö Tasks ‡πÉ‡∏ô Memory
        for task in tasks:
            self.tasks[task.id] = task
        
        # ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡∏•‡∏∞ Task (Sequential ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Dependencies)
        for task in tasks:
            try:
                # ‡∏£‡∏≠‡πÉ‡∏´‡πâ Dependencies ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô
                if "depends_on" in task.requirements:
                    dep_task_id = task.requirements["depends_on"]
                    await self._wait_for_task_completion(dep_task_id)
                
                # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
                task.status = TaskStatus.IN_PROGRESS
                print(f"‚ö° Starting task: {task.id} - {task.description}")
                
                # ‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ Agent
                result = await self._assign_and_execute_task(task)
                
                # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏á‡∏≤‡∏ô
                if await self._validate_task_result(task, result):
                    task.status = TaskStatus.COMPLETED
                    task.result = result
                    task.completed_at = datetime.now()
                    print(f"‚úÖ Task completed: {task.id}")
                else:
                    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡πÉ‡∏´‡∏°‡πà
                    print(f"‚ùå Task failed quality check, retrying: {task.id}")
                    await self._retry_task(task)
                    
            except Exception as e:
                task.status = TaskStatus.FAILED
                task.error = str(e)
                print(f"üí• Task failed: {task.id} - {e}")
                break
        
        print(f"üéâ Workflow {workflow_id} completed!")
    
    async def _assign_and_execute_task(self, task: Task) -> Dict[str, Any]:
        """‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ Agent ‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"""
        
        if task.type == "requirement_analysis":
            from .requirement_analyzer import RequirementAnalyzer
            from openai import AsyncOpenAI
            import os
            
            client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))
            agent = RequirementAnalyzer(client)
            return await agent.analyze_requirements(task.requirements["user_request"])
            
        elif task.type == "system_design":
            from .conversational_design_agent import ConversationalDesignAgent
            from openai import AsyncOpenAI
            import os
            
            client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))
            agent = ConversationalDesignAgent(client)
            prev_result = self.tasks["req_analysis"].result
            return await agent.create_design(prev_result)
            
        elif task.type == "code_generation":
            # ‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏à‡πÄ‡∏ô‡∏≠‡πÄ‡∏£‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡∏Å‡πà‡∏≠‡∏ô
            return await self._generate_simple_website(task)
            
        elif task.type == "quality_testing":
            return await self._run_quality_tests(task)
            
        elif task.type == "deployment":
            return await self._deploy_to_preview(task)
            
        return {"error": "Unknown task type"}
    
    async def _run_quality_tests(self, task: Task) -> Dict[str, Any]:
        """‡∏£‡∏±‡∏ô Quality Tests ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°"""
        code_result = self.tasks["code_generation"].result
        
        test_results = {
            "syntax_check": True,
            "performance_test": True,
            "accessibility_test": True,
            "responsive_test": True,
            "cross_browser_test": True,
            "security_test": True,
            "errors": [],
            "warnings": [],
            "score": 0
        }
        
        # Syntax Check
        if "html_content" in code_result:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö HTML Syntax
            html = code_result["html_content"]
            if "<html" not in html or "</html>" not in html:
                test_results["syntax_check"] = False
                test_results["errors"].append("Invalid HTML structure")
        
        # Performance Test
        # (‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Performance)
        performance_score = 95  # Mock score
        if performance_score < 80:
            test_results["performance_test"] = False
            test_results["errors"].append(f"Performance score too low: {performance_score}")
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°
        passed_tests = sum([
            test_results["syntax_check"],
            test_results["performance_test"], 
            test_results["accessibility_test"],
            test_results["responsive_test"]
        ])
        test_results["score"] = (passed_tests / 4) * 100
        
        return test_results
    
    async def _validate_task_result(self, task: Task, result: Dict[str, Any]) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        
        if task.type == "quality_testing":
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡πà‡∏≤‡∏ô Quality Standards
            if len(result.get("errors", [])) > self.quality_standards["max_errors"]:
                return False
            if result.get("score", 0) < self.quality_standards["accessibility_score"]:
                return False
            return True
        
        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Task ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ result
        return result and not result.get("error")
    
    async def _retry_task(self, task: Task, max_retries: int = 3):
        """‡∏•‡∏≠‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô"""
        for retry in range(max_retries):
            print(f"üîÑ Retrying task {task.id} (attempt {retry + 1})")
            
            result = await self._assign_and_execute_task(task)
            
            if await self._validate_task_result(task, result):
                task.status = TaskStatus.COMPLETED
                task.result = result
                task.completed_at = datetime.now()
                return
        
        # ‡∏´‡∏≤‡∏Å‡∏•‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô
        task.status = TaskStatus.FAILED
        task.error = f"Failed after {max_retries} retries"
    
    async def _wait_for_task_completion(self, task_id: str):
        """‡∏£‡∏≠‡πÉ‡∏´‡πâ Task ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô"""
        while True:
            task = self.tasks.get(task_id)
            if task and task.status in [TaskStatus.COMPLETED, TaskStatus.FAILED]:
                break
            await asyncio.sleep(0.1)
    
    async def _deploy_to_preview(self, task: Task) -> Dict[str, Any]:
        """Deploy ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Preview Environment"""
        from pathlib import Path
        import os
        
        code_result = self.tasks["code_generation"].result
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Directory
        webroot = Path(os.getenv("WEBROOT", "/app/workspace/generated-app/apps/web"))
        deploy_dir = webroot / f"auto-{timestamp}"
        deploy_dir.mkdir(parents=True, exist_ok=True)
        
        # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå
        if "html_content" in code_result:
            (deploy_dir / "index.html").write_text(code_result["html_content"], encoding="utf-8")
        
        preview_url = f"http://localhost:8001/app/auto-{timestamp}/index.html"
        
        return {
            "deployed": True,
            "preview_url": preview_url,
            "deploy_path": str(deploy_dir)
        }
    
    def get_workflow_status(self, workflow_id: str) -> Dict[str, Any]:
        """‡∏î‡∏π Status ‡∏Ç‡∏≠‡∏á Workflow"""
        tasks_status = {}
        for task_id, task in self.tasks.items():
            tasks_status[task_id] = {
                "status": task.status.value,
                "description": task.description,
                "completed_at": task.completed_at.isoformat() if task.completed_at else None,
                "error": task.error
            }
        
        return {
            "workflow_id": workflow_id,
            "tasks": tasks_status,
            "overall_progress": self._calculate_progress()
        }
    
    def _calculate_progress(self) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°"""
        if not self.tasks:
            return 0.0
        
        completed = sum(1 for task in self.tasks.values() if task.status == TaskStatus.COMPLETED)
        total = len(self.tasks)
        return (completed / total) * 100
    
    async def _generate_simple_website(self, task: Task) -> Dict[str, Any]:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ OpenAI"""
        try:
            from openai import AsyncOpenAI
            import os
            
            client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å design task
            design_result = self.tasks.get("system_design", {}).result or {}
            req_result = self.tasks.get("req_analysis", {}).result or {}
            
            user_request = req_result.get("original_request", "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå")
            
            prompt = f"""
            ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå HTML ‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏Ç‡∏≠: "{user_request}"
            
            ‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î:
            - HTML5 ‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
            - CSS ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå (internal styles)
            - ‡πÉ‡∏ä‡πâ Google Fonts ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
            - Responsive Design
            - ‡∏™‡∏µ‡∏™‡∏±‡∏ô‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏° modern
            - ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠
            - Animation ‡πÄ‡∏ö‡∏≤‡πÜ
            - ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
            
            ‡∏ï‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏Ñ‡πâ‡∏î HTML ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢:
            """
            
            response = await client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.7,
                max_tokens=3000
            )
            
            html_content = response.choices[0].message.content.strip()
            
            # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÇ‡∏Ñ‡πâ‡∏î
            if "```html" in html_content:
                html_content = html_content.split("```html")[1].split("```")[0].strip()
            elif "```" in html_content:
                html_content = html_content.split("```")[1].strip()
            
            return {
                "html_content": html_content,
                "generated_by": "OpenAI GPT-4o-mini",
                "user_request": user_request,
                "success": True
            }
            
        except Exception as e:
            return {
                "error": str(e),
                "success": False
            }
    
    async def _analyze_professional_requirements(self, user_request: str) -> bool:
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Professional Project ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        
        professional_keywords = [
            "professional", "enterprise", "business", "company", "corporate",
            "ecommerce", "‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á", "‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à", "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó", "‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£",
            "system", "platform", "app", "application", "website", "‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå",
            "‡∏£‡∏∞‡∏ö‡∏ö", "‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°", "‡πÅ‡∏≠‡∏õ", "‡πÅ‡∏≠‡∏û", "‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°",
            "workflow", "complete", "full", "‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô", "‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå", "‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö"
        ]
        
        request_lower = user_request.lower()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö keyword
        has_professional_keywords = any(keyword in request_lower for keyword in professional_keywords)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
        complexity_indicators = [
            "database", "‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "login", "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö", "payment", "‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô",
            "user management", "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", "admin", "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö",
            "api", "backend", "multiple pages", "‡∏´‡∏•‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤"
        ]
        
        is_complex = any(indicator in request_lower for indicator in complexity_indicators)
        
        return has_professional_keywords or is_complex
    
    async def _create_enterprise_task_chain(self, user_request: str) -> List[Task]:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Enterprise Project"""
        tasks = []
        
        # Task 1: Deep Requirements Analysis
        tasks.append(Task(
            id="enterprise_req_analysis",
            type="enterprise_requirement_analysis",
            description="Deep analysis of business requirements for professional project",
            requirements={"user_request": user_request, "enterprise_grade": True},
            status=TaskStatus.PENDING,
            created_at=datetime.now()
        ))
        
        # Task 2: Enterprise Architecture Design
        tasks.append(Task(
            id="enterprise_architecture",
            type="enterprise_architecture",
            description="Design comprehensive system architecture and database schema",
            requirements={"depends_on": "enterprise_req_analysis"},
            status=TaskStatus.PENDING,
            created_at=datetime.now()
        ))
        
        # Task 3: Professional Frontend Development
        tasks.append(Task(
            id="frontend_development",
            type="frontend_development",
            description="Create professional frontend with multiple pages and components",
            requirements={"depends_on": "enterprise_architecture"},
            status=TaskStatus.PENDING,
            created_at=datetime.now()
        ))
        
        # Task 4: Backend API Development
        tasks.append(Task(
            id="backend_development",
            type="backend_development",
            description="Develop REST API with authentication and database integration",
            requirements={"depends_on": "enterprise_architecture"},
            status=TaskStatus.PENDING,
            created_at=datetime.now()
        ))
        
        # Task 5: Database Setup
        tasks.append(Task(
            id="database_setup",
            type="database_setup",
            description="Create database schema and seed data",
            requirements={"depends_on": "enterprise_architecture"},
            status=TaskStatus.PENDING,
            created_at=datetime.now()
        ))
        
        # Task 6: Integration Testing
        tasks.append(Task(
            id="integration_testing",
            type="integration_testing",
            description="Test all components working together",
            requirements={"depends_on": ["frontend_development", "backend_development", "database_setup"]},
            status=TaskStatus.PENDING,
            created_at=datetime.now()
        ))
        
        # Task 7: Professional Deployment
        tasks.append(Task(
            id="professional_deployment",
            type="professional_deployment",
            description="Deploy complete system to production-like environment",
            requirements={"depends_on": "integration_testing"},
            status=TaskStatus.PENDING,
            created_at=datetime.now()
        ))
        
        return tasks
    
    async def _execute_enterprise_workflow(self, workflow_id: str, tasks: List[Task], user_request: str):
        """‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ Enterprise Workflow"""
        print(f"üè¢ Supervisor: Executing ENTERPRISE workflow {workflow_id}")
        
        # Import Enterprise Generator
        from .enterprise_generator import enterprise_generator
        
        try:
            # Phase 1: ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∂‡∏Å‡∏ã‡∏∂‡πâ‡∏á
            print("üîç Phase 1: Deep Requirements Analysis...")
            analysis = await enterprise_generator.analyze_requirements_thoroughly(user_request)
            
            project_type = analysis.get("project_type", "professional_website")
            print(f"üìä Detected Project Type: {project_type}")
            
            # Phase 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á Professional Project Structure
            print("üèóÔ∏è Phase 2: Generating Professional Project...")
            
            if project_type in ["professional_website", "ecommerce_platform", "saas_platform"]:
                project_structure = await enterprise_generator.generate_professional_website(analysis)
            elif project_type == "mobile_app":
                project_structure = await enterprise_generator.generate_mobile_app(analysis)
            else:
                project_structure = await enterprise_generator.generate_professional_website(analysis)
            
            # Phase 3: Deploy to Professional Environment
            print("üöÄ Phase 3: Deploying to Professional Environment...")
            deployment_info = await enterprise_generator.deploy_project(
                project_structure,
                f"{project_type}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            )
            
            # Phase 4: Update workflow status
            print("‚úÖ Enterprise Workflow Completed Successfully!")
            print(f"üåê Access URLs: {deployment_info.get('urls', {})}")
            
            # Store results in workflow tracking
            self.workflow_results[workflow_id] = {
                "status": "completed",
                "project_type": project_type,
                "analysis": analysis,
                "project_structure": project_structure,
                "deployment_info": deployment_info,
                "professional_grade": True,
                "completed_at": datetime.now().isoformat()
            }
            
        except Exception as e:
            print(f"‚ùå Enterprise workflow failed: {e}")
            self.workflow_results[workflow_id] = {
                "status": "failed", 
                "error": str(e),
                "completed_at": datetime.now().isoformat()
            }

# Singleton Instance
supervisor_agent = SupervisorAgent()