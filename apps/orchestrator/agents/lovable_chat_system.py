"""
ü§ñ AI Chat System ‡πÅ‡∏ö‡∏ö Lovable - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Apps ‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏¢‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á applications ‡∏ó‡∏∏‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
"""
import os
import json
import asyncio
from typing import Dict, List, Any, Optional
from dataclasses import dataclass, asdict
from enum import Enum
import openai
from datetime import datetime

class AppComplexity(Enum):
    SIMPLE = "simple"           # ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß, ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    MODERATE = "moderate"       # ‡∏´‡∏•‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤, database, API
    COMPLEX = "complex"         # Microservices, advanced features
    ENTERPRISE = "enterprise"   # Distributed, scalable, security

class AppCategory(Enum):
    SOCIAL_MEDIA = "social_media"
    ECOMMERCE = "ecommerce" 
    PRODUCTIVITY = "productivity"
    ENTERTAINMENT = "entertainment"
    EDUCATION = "education"
    HEALTHCARE = "healthcare"
    FINTECH = "fintech"
    IOT = "iot"
    AI_ML = "ai_ml"
    BLOCKCHAIN = "blockchain"

@dataclass
class AppRequirement:
    """‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á app"""
    name: str
    category: AppCategory
    complexity: AppComplexity
    platforms: List[str]  # web, mobile, desktop
    key_features: List[str]
    target_users: str
    business_model: str
    tech_preferences: List[str] = None
    performance_needs: Dict = None
    security_level: str = "standard"
    scalability_needs: str = "medium"
    timeline: str = None
    budget_range: str = None

class LovableAIChatSystem:
    """AI Chat System ‡∏ó‡∏µ‡πà‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Apps ‡πÅ‡∏ö‡∏ö Lovable"""
    
    def __init__(self, openai_api_key: str = None):
        if openai_api_key:
            self.openai_client = openai.AsyncOpenAI(api_key=openai_api_key)
        else:
            self.openai_client = None
        self.conversation_history = []
        self.current_app_context = None
        self.app_templates = self._initialize_app_templates()
        self.complexity_patterns = self._initialize_complexity_patterns()
        
    def _initialize_app_templates(self) -> Dict:
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô templates ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö apps ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"""
        return {
            AppCategory.SOCIAL_MEDIA: {
                "simple": {
                    "features": ["user_profiles", "posts", "comments", "likes"],
                    "tech_stack": ["React", "Firebase", "React Native"],
                    "components": ["feed", "profile", "chat"]
                },
                "complex": {
                    "features": ["real_time_messaging", "video_calls", "AI_recommendations", "content_moderation"],
                    "tech_stack": ["React", "Node.js", "WebRTC", "AI/ML", "Microservices"],
                    "components": ["advanced_feed", "video_system", "ai_engine", "moderation_system"]
                }
            },
            AppCategory.ECOMMERCE: {
                "simple": {
                    "features": ["product_catalog", "shopping_cart", "checkout", "payments"],
                    "tech_stack": ["React", "Stripe", "MongoDB"],
                    "components": ["product_grid", "cart", "payment_form"]
                },
                "complex": {
                    "features": ["inventory_management", "recommendation_engine", "multi_vendor", "analytics"],
                    "tech_stack": ["Microservices", "AI/ML", "Data Analytics", "Multi-region"],
                    "components": ["inventory_system", "recommendation_ai", "vendor_portal", "analytics_dashboard"]
                }
            },
            AppCategory.FINTECH: {
                "simple": {
                    "features": ["account_management", "transactions", "balance_tracking"],
                    "tech_stack": ["React", "Secure APIs", "Encryption"],
                    "components": ["account_dashboard", "transaction_history"]
                },
                "complex": {
                    "features": ["algorithmic_trading", "fraud_detection", "compliance", "multi_currency"],
                    "tech_stack": ["High-frequency systems", "ML/AI", "Blockchain", "Regulatory compliance"],
                    "components": ["trading_engine", "fraud_ai", "compliance_system", "currency_exchange"]
                }
            }
        }
    
    def _initialize_complexity_patterns(self) -> Dict:
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô patterns ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô"""
        return {
            AppComplexity.SIMPLE: {
                "architecture": "Monolith",
                "database": "Single database",
                "deployment": "Single server",
                "team_size": "1-2 developers",
                "timeline": "2-8 weeks",
                "technologies": ["React/Vue", "Node.js/Python", "SQLite/MongoDB"],
                "complexity_score": 1
            },
            AppComplexity.MODERATE: {
                "architecture": "Layered architecture",
                "database": "Primary + Cache",
                "deployment": "Load balanced",
                "team_size": "3-5 developers", 
                "timeline": "2-4 months",
                "technologies": ["React/Vue", "API Gateway", "PostgreSQL", "Redis"],
                "complexity_score": 3
            },
            AppComplexity.COMPLEX: {
                "architecture": "Microservices",
                "database": "Multiple databases",
                "deployment": "Container orchestration", 
                "team_size": "5-10 developers",
                "timeline": "4-8 months",
                "technologies": ["React/Angular", "Microservices", "Kubernetes", "Event Sourcing"],
                "complexity_score": 7
            },
            AppComplexity.ENTERPRISE: {
                "architecture": "Distributed systems",
                "database": "Multi-region, CQRS",
                "deployment": "Multi-cloud, Auto-scaling",
                "team_size": "10+ developers",
                "timeline": "8+ months", 
                "technologies": ["Enterprise frameworks", "Service mesh", "Event streaming", "AI/ML"],
                "complexity_score": 10
            }
        }
    
    async def chat(self, user_message: str, context: Dict = None) -> Dict[str, Any]:
        """‡∏´‡∏•‡∏±‡∏Å method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö AI"""
        try:
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå user intent
            intent = await self._analyze_user_intent(user_message)
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô conversation history
            self.conversation_history.append({
                "timestamp": datetime.now().isoformat(),
                "user": user_message,
                "intent": intent
            })
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á response ‡∏ï‡∏≤‡∏° intent
            if intent["type"] == "app_idea":
                response = await self._handle_app_idea_discussion(user_message, intent)
            elif intent["type"] == "technical_question":
                response = await self._handle_technical_question(user_message, intent)
            elif intent["type"] == "complexity_analysis":
                response = await self._handle_complexity_analysis(user_message, intent)
            elif intent["type"] == "architecture_design":
                response = await self._handle_architecture_design(user_message, intent)
            elif intent["type"] == "implementation_help":
                response = await self._handle_implementation_help(user_message, intent)
            else:
                response = await self._handle_general_chat(user_message, intent)
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° AI response ‡πÉ‡∏ô history
            self.conversation_history.append({
                "timestamp": datetime.now().isoformat(),
                "ai": response["message"],
                "suggestions": response.get("suggestions", []),
                "generated_content": response.get("generated_content")
            })
            
            return response
            
        except Exception as e:
            return {
                "success": False,
                "message": "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•",
                "error": str(e)
            }
    
    async def _analyze_user_intent(self, message: str) -> Dict:
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"""
        
        # Keywords ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó intent
        intent_keywords = {
            "app_idea": ["‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ", "‡∏ó‡∏≥‡πÅ‡∏≠‡∏õ", "app ‡πÉ‡∏´‡∏°‡πà", "‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡πÅ‡∏≠‡∏õ", "‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô"],
            "technical_question": ["‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ", "‡πÇ‡∏Ñ‡πâ‡∏î", "‡∏†‡∏≤‡∏©‡∏≤", "framework", "database", "API"],
            "complexity_analysis": ["‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô", "‡∏¢‡∏≤‡∏Å", "enterprise", "scalable", "performance"],
            "architecture_design": ["‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡∏Å‡∏£‡∏£‡∏°", "architecture", "microservice", "system design"],
            "implementation_help": ["‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏≥", "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡πâ", "generate", "implement", "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"]
        }
        
        message_lower = message.lower()
        detected_intents = []
        
        for intent_type, keywords in intent_keywords.items():
            if any(keyword in message_lower for keyword in keywords):
                detected_intents.append(intent_type)
        
        # ‡πÉ‡∏ä‡πâ AI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        ai_analysis = await self._get_ai_intent_analysis(message)
        
        return {
            "type": detected_intents[0] if detected_intents else "general_chat",
            "confidence": len(detected_intents) / len(intent_keywords),
            "detected_intents": detected_intents,
            "ai_analysis": ai_analysis,
            "entities": await self._extract_entities(message)
        }
    
    async def _get_ai_intent_analysis(self, message: str) -> Dict:
        """‡πÉ‡∏ä‡πâ AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå intent ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"""
        
        system_prompt = """
        ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô AI ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á applications
        ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏ö‡∏≠‡∏Å:
        1. ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á app ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏ô‡πÉ‡∏à
        2. ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
        3. ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
        4. ‡∏Ç‡πâ‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        
        ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON format ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        """
        
        try:
            response = await self.openai_client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": f"‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: {message}"}
                ],
                temperature=0.3
            )
            
            return json.loads(response.choices[0].message.content)
        except:
            return {"app_type": "unknown", "complexity": "unknown"}
    
    async def _extract_entities(self, message: str) -> Dict:
        """‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"""
        entities = {
            "app_names": [],
            "technologies": [],
            "platforms": [],
            "features": [],
            "business_domains": []
        }
        
        # Technology keywords
        tech_keywords = {
            "web": ["react", "vue", "angular", "nextjs", "web", "website"],
            "mobile": ["react native", "flutter", "mobile", "app", "ios", "android"],
            "backend": ["nodejs", "python", "fastapi", "express", "api"],
            "database": ["mongodb", "postgresql", "mysql", "firebase", "redis"],
            "ai_ml": ["ai", "machine learning", "ml", "chatbot", "recommendation"]
        }
        
        message_lower = message.lower()
        for category, keywords in tech_keywords.items():
            found_techs = [keyword for keyword in keywords if keyword in message_lower]
            if found_techs:
                entities["technologies"].extend(found_techs)
        
        return entities
    
    async def _handle_app_idea_discussion(self, message: str, intent: Dict) -> Dict:
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∏‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢ app"""
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á response ‡∏ó‡∏µ‡πà‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á app
        system_prompt = f"""
        ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô AI ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á applications ‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        
        ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢ app ‡πÇ‡∏î‡∏¢‡πÇ‡∏ü‡∏Å‡∏±‡∏™:
        1. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∂‡∏Å‡∏ã‡∏∂‡πâ‡∏á  
        2. ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        3. ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
        4. ‡πÄ‡∏™‡∏ô‡∏≠ features ‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à
        5. ‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤
        
        ‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£ ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå ‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏∞‡∏ï‡∏∏‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏¥‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        
        Context: {intent}
        """
        
        try:
            response = await self.openai_client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": message}
                ],
                temperature=0.7
            )
            
            ai_message = response.choices[0].message.content
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á suggestions
            suggestions = await self._generate_app_suggestions(intent)
            
            return {
                "success": True,
                "message": ai_message,
                "suggestions": suggestions,
                "follow_up_questions": await self._generate_follow_up_questions(intent),
                "quick_actions": [
                    {"text": "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô", "action": "analyze_complexity"},
                    {"text": "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ", "action": "suggest_tech"},
                    {"text": "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á prototype", "action": "start_prototype"}
                ]
            }
            
        except Exception as e:
            return {
                "success": False,
                "message": "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ",
                "error": str(e)
            }
    
    async def _handle_complexity_analysis(self, message: str, intent: Dict) -> Dict:
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á app"""
        
        # ‡πÉ‡∏ä‡πâ AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
        complexity_prompt = f"""
        ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á application ‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {message}
        
        ‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÉ‡∏ô 4 ‡∏£‡∏∞‡∏î‡∏±‡∏ö:
        1. SIMPLE - app ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô 1-2 features
        2. MODERATE - app ‡∏ó‡∏µ‡πà‡∏°‡∏µ database, API, ‡∏´‡∏•‡∏≤‡∏¢ features  
        3. COMPLEX - app ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ microservices, advanced features
        4. ENTERPRISE - distributed system, scalable, security ‡∏™‡∏π‡∏á
        
        ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON ‡∏ó‡∏µ‡πà‡∏°‡∏µ:
        - complexity_level
        - reasoning  
        - technical_requirements
        - estimated_timeline
        - team_size_needed
        - key_challenges
        """
        
        try:
            response = await self.openai_client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "user", "content": complexity_prompt}
                ],
                temperature=0.3
            )
            
            analysis = json.loads(response.choices[0].message.content)
            complexity_level = AppComplexity(analysis["complexity_level"].lower())
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å patterns
            pattern_info = self.complexity_patterns[complexity_level]
            
            return {
                "success": True,
                "message": f"üìä **‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô: {complexity_level.value.upper()}**\n\n" +
                          f"**‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•:** {analysis['reasoning']}\n\n" +
                          f"**‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ:** {analysis['technical_requirements']}\n\n" +
                          f"**‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÄ‡∏ß‡∏•‡∏≤:** {analysis['estimated_timeline']}\n\n" +
                          f"**‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡∏°:** {analysis['team_size_needed']}\n\n" +
                          f"**‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢:** {analysis['key_challenges']}",
                "analysis": analysis,
                "pattern_info": pattern_info,
                "complexity_score": pattern_info["complexity_score"],
                "quick_actions": [
                    {"text": "‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥", "action": "show_architecture"},
                    {"text": "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ", "action": "suggest_tech_stack"},
                    {"text": "‡∏™‡∏£‡πâ‡∏≤‡∏á prototype", "action": "create_prototype"}
                ]
            }
            
        except Exception as e:
            return {
                "success": False,
                "message": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡πÑ‡∏î‡πâ",
                "error": str(e)
            }
    
    async def _handle_architecture_design(self, message: str, intent: Dict) -> Dict:
        """‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á app"""
        
        architecture_prompt = f"""
        ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡∏Å‡∏£‡∏£‡∏° application ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: {message}
        
        ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°:
        1. System Architecture (monolith/microservices/serverless)
        2. Database Design (‡∏£‡∏ß‡∏° schema ‡∏´‡∏•‡∏±‡∏Å)
        3. API Design (endpoints ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç)
        4. Security Architecture
        5. Scalability Strategy
        6. Technology Stack ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        7. Deployment Architecture
        
        ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
        """
        
        try:
            response = await self.openai_client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "user", "content": architecture_prompt}
                ],
                temperature=0.4
            )
            
            architecture = json.loads(response.choices[0].message.content)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á visual representation
            visual_arch = await self._create_architecture_visual(architecture)
            
            return {
                "success": True,
                "message": "üèóÔ∏è **‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡∏Å‡∏£‡∏£‡∏° Application**\n\n" +
                          self._format_architecture_response(architecture),
                "architecture": architecture,
                "visual": visual_arch,
                "generated_content": {
                    "database_schema": architecture.get("database_design"),
                    "api_endpoints": architecture.get("api_design"),
                    "tech_stack": architecture.get("technology_stack")
                },
                "quick_actions": [
                    {"text": "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î prototype", "action": "generate_code"},
                    {"text": "‡∏™‡∏£‡πâ‡∏≤‡∏á database schema", "action": "create_database"},
                    {"text": "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå cost", "action": "analyze_cost"}
                ]
            }
            
        except Exception as e:
            return {
                "success": False,
                "message": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏î‡πâ",
                "error": str(e)
            }
    
    async def _handle_implementation_help(self, message: str, intent: Dict) -> Dict:
        """‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ implement"""
        
        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ current_app_context ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        context_info = ""
        if self.current_app_context:
            context_info = f"App context: {json.dumps(asdict(self.current_app_context), indent=2)}"
        
        implementation_prompt = f"""
        ‡∏ä‡πà‡∏ß‡∏¢‡∏Å‡∏≤‡∏£ implement application ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏Ç‡∏≠: {message}
        
        {context_info}
        
        ‡πÉ‡∏´‡πâ:
        1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
        2. ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ step-by-step
        3. ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ best practices
        4. ‡∏£‡∏∞‡∏ö‡∏∏ dependencies ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á
        5. ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£ deploy
        
        ‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á production-ready code
        """
        
        try:
            response = await self.openai_client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "user", "content": implementation_prompt}
                ],
                temperature=0.3
            )
            
            implementation_guide = response.choices[0].message.content
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
            code_examples = await self._generate_code_examples(message, intent)
            
            return {
                "success": True,
                "message": implementation_guide,
                "generated_content": {
                    "code_examples": code_examples,
                    "implementation_steps": await self._extract_implementation_steps(implementation_guide)
                },
                "quick_actions": [
                    {"text": "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÄ‡∏ï‡πá‡∏°", "action": "create_full_project"},
                    {"text": "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î", "action": "test_code"},
                    {"text": "deploy app", "action": "deploy_app"}
                ]
            }
            
        except Exception as e:
            return {
                "success": False,
                "message": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡∏Å‡∏≤‡∏£ implement ‡πÑ‡∏î‡πâ",
                "error": str(e)
            }
    
    async def create_app_from_conversation(self) -> Dict:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á app ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤"""
        
        if not self.conversation_history:
            return {
                "success": False,
                "message": "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö app"
            }
        
        # ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
        conversation_summary = await self._summarize_conversation()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á AppRequirement
        app_req = await self._extract_app_requirements(conversation_summary)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á app ‡∏ï‡∏≤‡∏° requirements
        return await self._generate_complete_app(app_req)
    
    def _format_architecture_response(self, architecture: Dict) -> str:
        """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö response ‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡∏Å‡∏£‡∏£‡∏°"""
        formatted = f"**System Type:** {architecture.get('system_architecture', 'N/A')}\n\n"
        
        if architecture.get('database_design'):
            formatted += f"**Database:** {architecture['database_design']}\n\n"
            
        if architecture.get('technology_stack'):
            formatted += f"**Tech Stack:** {', '.join(architecture['technology_stack'])}\n\n"
            
        if architecture.get('scalability_strategy'):
            formatted += f"**Scalability:** {architecture['scalability_strategy']}\n\n"
            
        return formatted
    
    async def _generate_app_suggestions(self, intent: Dict) -> List[str]:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á suggestions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö app"""
        return [
            "üí° ‡πÄ‡∏û‡∏¥‡πà‡∏° AI features ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à",
            "üì± ‡∏ó‡∏≥ mobile app ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢", 
            "üîÑ ‡πÄ‡∏û‡∏¥‡πà‡∏° real-time features",
            "üõ°Ô∏è ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö security ‡∏ó‡∏µ‡πà‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á",
            "üìà ‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô scalability ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"
        ]
    
    async def _generate_follow_up_questions(self, intent: Dict) -> List[str]:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°"""
        return [
            "‡πÉ‡∏Ñ‡∏£‡∏Ñ‡∏∑‡∏≠ target users ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á app ‡∏ô‡∏µ‡πâ?",
            "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ app ‡∏ô‡∏µ‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏µ‡πà‡∏Ñ‡∏ô‡πÉ‡∏ä‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô?",
            "‡∏°‡∏µ budget ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏î‡πâ‡∏≤‡∏ô‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÑ‡∏´‡∏°?",
            "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ launch ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà?",
            "‡∏°‡∏µ‡πÅ‡∏ú‡∏ô‡∏ó‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å app ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?"
        ]

# ‡∏™‡∏£‡πâ‡∏≤‡∏á instance
def create_lovable_chat_system(openai_api_key: str) -> LovableAIChatSystem:
    """‡∏™‡∏£‡πâ‡∏≤‡∏á LovableAIChatSystem instance"""
    return LovableAIChatSystem(openai_api_key)

# Helper functions
async def demo_complex_app_chat():
    """‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö complex apps"""
    
    print("üöÄ Lovable AI Chat System - ‡∏™‡∏£‡πâ‡∏≤‡∏á Apps ‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô")
    print("=" * 50)
    
    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á conversations
    sample_conversations = [
        "‡∏ú‡∏°‡∏≠‡∏¢‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á social media app ‡πÅ‡∏ö‡∏ö Instagram ‡πÅ‡∏ï‡πà‡πÄ‡∏û‡∏¥‡πà‡∏° AI ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à",
        "‡∏ó‡∏≥ e-commerce platform ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö multi-vendor ‡πÅ‡∏•‡∏∞‡∏°‡∏µ ML recommendation engine",
        "‡∏™‡∏£‡πâ‡∏≤‡∏á fintech app ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö trading cryptocurrency ‡∏î‡πâ‡∏ß‡∏¢ algorithmic trading",
        "‡∏ú‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ IoT platform ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° smart devices ‡πÅ‡∏•‡∏∞ analyze data real-time",
        "‡∏≠‡∏¢‡∏≤‡∏Å‡∏ó‡∏≥ enterprise CRM ‡∏ó‡∏µ‡πà‡∏°‡∏µ AI chatbot ‡πÅ‡∏•‡∏∞ advanced analytics"
    ]
    
    for i, conv in enumerate(sample_conversations, 1):
        print(f"\n{i}. {conv}")
    
    print("\n‚ú® ‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ:")
    print("üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡∏Å‡∏£‡∏£‡∏°")
    print("üõ†Ô∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î ‡πÅ‡∏•‡∏∞ database schema")
    print("üöÄ ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö deployment strategy")
    print("üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ advanced features")
    print("üîí ‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô security ‡πÅ‡∏•‡∏∞ scalability")

if __name__ == "__main__":
    asyncio.run(demo_complex_app_chat())