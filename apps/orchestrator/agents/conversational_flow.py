"""
üé≠ Advanced Conversational AI - ‡∏Ñ‡∏∏‡∏¢‡πÑ‡∏´‡∏•‡∏•‡∏∑‡πà‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô Lovable
"""

from openai import AsyncOpenAI
from typing import Dict, List, Any, Optional
from datetime import datetime
import json
import re

class ConversationalFlowManager:
    def __init__(self):
        self.client = AsyncOpenAI()
        self.conversation_memory = {}
        self.user_preferences = {}
        self.project_context = {}
        
        # Personality ‡πÇ‡∏î‡∏¢‡∏£‡∏≠‡∏ö
        self.ai_personality = {
            "tone": "friendly_professional",
            "style": "conversational", 
            "expertise": "web_development",
            "empathy_level": "high",
            "proactivity": "very_high"
        }
        
    async def process_conversation(self, user_id: str, message: str, context: Dict = None) -> Dict[str, Any]:
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏•‡∏•‡∏∑‡πà‡∏ô"""
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô Memory
        if user_id not in self.conversation_memory:
            self.conversation_memory[user_id] = []
            
        self.conversation_memory[user_id].append({
            "role": "user",
            "content": message,
            "timestamp": datetime.now()
        })
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Intent ‡πÅ‡∏•‡∏∞ Context
        intent_analysis = await self._analyze_user_intent(message, user_id)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Response ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        response_data = await self._generate_contextual_response(
            user_id, message, intent_analysis, context
        )
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å AI Response
        self.conversation_memory[user_id].append({
            "role": "assistant", 
            "content": response_data["message"],
            "timestamp": datetime.now(),
            "intent": intent_analysis,
            "actions": response_data.get("actions", [])
        })
        
        return response_data
    
    async def _analyze_user_intent(self, message: str, user_id: str) -> Dict[str, Any]:
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏à‡∏ï‡∏ô‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"""
        
        conversation_history = self._get_conversation_context(user_id)
        
        analysis_prompt = f"""
        ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:
        
        ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: "{message}"
        
        ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤: {conversation_history}
        
        ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:
        1. ‡πÄ‡∏à‡∏ï‡∏ô‡∏≤‡∏´‡∏•‡∏±‡∏Å (primary_intent)
        2. ‡πÄ‡∏à‡∏ï‡∏ô‡∏≤‡∏£‡∏≠‡∏á (secondary_intents) 
        3. ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (clarity_level: 1-10)
        4. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ (missing_information)
        5. ‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå/‡πÇ‡∏ó‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á (emotional_tone)
        6. ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô (urgency_level: 1-10)
        7. ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå (project_type)
        8. ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô (complexity_level: 1-10)
        
        ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON:
        {{
            "primary_intent": "create_website|ask_question|modify_request|get_status|other",
            "secondary_intents": [],
            "clarity_level": 0,
            "missing_information": [],
            "emotional_tone": "excited|neutral|frustrated|confused|urgent",
            "urgency_level": 0,
            "project_type": "website|app|landing_page|ecommerce|portfolio|other",
            "complexity_level": 0,
            "confidence_score": 0.0
        }}
        """
        
        try:
            response = await self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": analysis_prompt}],
                temperature=0.1
            )
            
            analysis_text = response.choices[0].message.content
            # Extract JSON ‡∏à‡∏≤‡∏Å response
            json_match = re.search(r'\{.*\}', analysis_text, re.DOTALL)
            if json_match:
                return json.loads(json_match.group())
                
        except Exception as e:
            print(f"Intent analysis error: {e}")
            
        # Fallback analysis
        return {
            "primary_intent": "create_website" if any(word in message.lower() for word in ["‡∏™‡∏£‡πâ‡∏≤‡∏á", "‡∏ó‡∏≥", "create", "build"]) else "ask_question",
            "clarity_level": 7,
            "emotional_tone": "neutral",
            "urgency_level": 5,
            "project_type": "website",
            "complexity_level": 5,
            "confidence_score": 0.6
        }
    
    async def _generate_contextual_response(self, user_id: str, message: str, intent: Dict, context: Dict = None) -> Dict[str, Any]:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Response ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ï‡∏≤‡∏° Context"""
        
        conversation_history = self._get_conversation_context(user_id, last_n=5)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á System Prompt ‡∏ó‡∏µ‡πà‡∏î‡∏µ
        system_prompt = self._create_system_prompt(intent, context)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Response ‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏•‡∏•‡∏∑‡πà‡∏ô
        response_data = await self._generate_natural_response(
            system_prompt, message, conversation_history, intent
        )
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£ Trigger Actions ‡πÑ‡∏´‡∏°
        if intent["primary_intent"] == "create_website" and intent["clarity_level"] >= 7:
            response_data["should_start_workflow"] = True
            response_data["workflow_params"] = {
                "user_request": message,
                "project_type": intent.get("project_type", "website"),
                "complexity": intent.get("complexity_level", 5),
                "urgency": intent.get("urgency_level", 5)
            }
        
        return response_data
    
    def _create_system_prompt(self, intent: Dict, context: Dict = None) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á System Prompt ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"""
        
        base_personality = """
        ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô AI Assistant ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå ‡∏°‡∏µ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
        - ‡∏Ñ‡∏∏‡∏¢‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
        - ‡∏ï‡∏≠‡∏ö‡πÇ‡∏ï‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏´‡∏•‡∏•‡∏∑‡πà‡∏ô‡πÅ‡∏•‡∏∞‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥  
        - ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏≤‡∏ç‡∏â‡∏•‡∏≤‡∏î
        - ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå
        - ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏≤‡πÉ‡∏à‡πÉ‡∏™‡πà
        """
        
        if intent["primary_intent"] == "create_website":
            if intent["clarity_level"] < 6:
                return base_personality + """
                
                ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå ‡πÅ‡∏ï‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
                ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏â‡∏•‡∏≤‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô:
                - ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå
                - ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏Å  
                - ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
                - ‡∏™‡∏µ‡∏™‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö
                - ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
                
                ‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡∏•‡∏∞ 2-3 ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
                """
            else:
                return base_personality + """
                
                ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå
                - ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°
                - ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à
                - ‡∏ö‡∏≠‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
                - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á
                """
        
        elif intent["emotional_tone"] == "frustrated":
            return base_personality + """
            
            ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏î‡∏π‡∏ó‡πâ‡∏≠‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏á‡∏∏‡∏î‡∏´‡∏á‡∏¥‡∏î
            - ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏≤‡πÉ‡∏à‡πÉ‡∏™‡πà
            - ‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏î‡∏ó‡∏ô  
            - ‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à
            - ‡πÄ‡∏™‡∏ô‡∏≠‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
            """
        
        return base_personality + """
        
        ‡∏ï‡∏≠‡∏ö‡πÇ‡∏ï‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå ‡πÅ‡∏•‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
        """
    
    async def _generate_natural_response(self, system_prompt: str, message: str, history: str, intent: Dict) -> Dict[str, Any]:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Response ‡∏ó‡∏µ‡πà‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡πÑ‡∏´‡∏•‡∏•‡∏∑‡πà‡∏ô"""
        
        messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": f"‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤:\n{history}\n\n‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà: {message}"}
        ]
        
        try:
            response = await self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=messages,
                temperature=0.7,
                max_tokens=800
            )
            
            ai_message = response.choices[0].message.content.strip()
            
            return {
                "message": ai_message,
                "intent_detected": intent,
                "response_type": "conversational",
                "confidence": intent.get("confidence_score", 0.8)
            }
            
        except Exception as e:
            print(f"Response generation error: {e}")
            return {
                "message": "‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö",
                "error": str(e)
            }
    
    def _get_conversation_context(self, user_id: str, last_n: int = 10) -> str:
        """‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á"""
        
        if user_id not in self.conversation_memory:
            return "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤"
        
        recent_messages = self.conversation_memory[user_id][-last_n:]
        
        context_lines = []
        for msg in recent_messages:
            role = "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" if msg["role"] == "user" else "AI"
            context_lines.append(f"{role}: {msg['content']}")
        
        return "\n".join(context_lines)
    
    def update_user_preferences(self, user_id: str, preferences: Dict):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"""
        if user_id not in self.user_preferences:
            self.user_preferences[user_id] = {}
        
        self.user_preferences[user_id].update(preferences)
    
    def get_conversation_summary(self, user_id: str) -> Dict[str, Any]:
        """‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤"""
        
        if user_id not in self.conversation_memory:
            return {"total_messages": 0, "summary": "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤"}
        
        messages = self.conversation_memory[user_id]
        
        return {
            "total_messages": len(messages),
            "last_conversation": messages[-1]["timestamp"] if messages else None,
            "user_preferences": self.user_preferences.get(user_id, {}),
            "project_context": self.project_context.get(user_id, {})
        }

# Singleton Instance
conversation_flow = ConversationalFlowManager()