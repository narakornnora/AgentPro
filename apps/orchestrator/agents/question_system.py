"""
ü§î Intelligent Question System
‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
"""

from typing import Dict, List, Any, Optional, Tuple
import re
import json
from dataclasses import dataclass
from enum import Enum

class RequirementType(Enum):
    """‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á requirements"""
    UI_DESIGN = "ui_design"
    FUNCTIONALITY = "functionality" 
    TECHNOLOGY = "technology"
    CONTENT = "content"
    BUSINESS = "business"
    USER_EXPERIENCE = "user_experience"

@dataclass
class Question:
    """‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏≤‡∏°"""
    id: str
    text: str
    category: RequirementType
    priority: int  # 1=‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î, 5=‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î
    options: List[str] = None  # ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    follow_up: List[str] = None  # ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á

class RequirementAnalyzer:
    """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"""
    
    def __init__(self):
        self.question_templates = self._load_question_templates()
        self.keywords = self._load_keywords()
        self.context_history = []
        
    def _load_question_templates(self) -> Dict:
        """‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°"""
        return {
            # UI & Design Questions
            "color_scheme": Question(
                id="color_scheme",
                text="üé® ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏ô‡∏™‡∏µ‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô?",
                category=RequirementType.UI_DESIGN,
                priority=2,
                options=["‡∏™‡∏µ‡∏™‡∏î‡πÉ‡∏™ (Vibrant)", "‡∏™‡∏µ‡∏≠‡πà‡∏≠‡∏ô (Pastel)", "‡∏™‡∏µ‡πÄ‡∏Ç‡πâ‡∏° (Dark)", "‡∏™‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ (Earth tones)", "‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à"]
            ),
            
            "layout_style": Question(
                id="layout_style", 
                text="üì± ‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏≠‡∏ö layout ‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô?",
                category=RequirementType.UI_DESIGN,
                priority=2,
                options=["‡πÅ‡∏ö‡∏ö Modern/Minimal", "‡πÅ‡∏ö‡∏ö Corporate", "‡πÅ‡∏ö‡∏ö Creative/Artistic", "‡πÅ‡∏ö‡∏ö E-commerce", "‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à"]
            ),
            
            "target_device": Question(
                id="target_device",
                text="üì± ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å ‡πÜ ‡∏ö‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÑ‡∏´‡∏ô?",
                category=RequirementType.UI_DESIGN,
                priority=1,
                options=["‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠ (Mobile First)", "‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå (Desktop)", "‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÄ‡∏ó‡πà‡∏≤ ‡πÜ ‡∏Å‡∏±‡∏ô", "‡πÅ‡∏ó‡πá‡∏ö‡πÄ‡∏•‡πá‡∏ï"]
            ),
            
            # Functionality Questions  
            "user_auth": Question(
                id="user_auth",
                text="üë§ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö Login/‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏´‡∏°?",
                category=RequirementType.FUNCTIONALITY,
                priority=1,
                options=["‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ - ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢", "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ - ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô", "‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£", "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à"]
            ),
            
            "data_storage": Question(
                id="data_storage", 
                text="üíæ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô?",
                category=RequirementType.FUNCTIONALITY,
                priority=2,
                options=["Local (‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á)", "Cloud Database", "‡πÑ‡∏ü‡∏•‡πå JSON/CSV", "‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"]
            ),
            
            "key_features": Question(
                id="key_features",
                text="‚ö° ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å ‡πÜ ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£? (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠)",
                category=RequirementType.FUNCTIONALITY, 
                priority=1,
                options=["‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤/‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå/‡∏£‡∏π‡∏õ", "‡πÅ‡∏ä‡∏ó/‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô", "‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô/‡∏Å‡∏£‡∏≤‡∏ü", "‡∏≠‡∏∑‡πà‡∏ô ‡πÜ"]
            ),
            
            # Content Questions
            "content_type": Question(
                id="content_type",
                text="üìù ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?",
                category=RequirementType.CONTENT,
                priority=1,
                options=["‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°/‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°", "‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û/‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ‡πà", "‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠", "‡∏ï‡∏≤‡∏£‡∏≤‡∏á/‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå/‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£"]
            ),
            
            "language_preference": Question(
                id="language_preference", 
                text="üåê ‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö?",
                category=RequirementType.CONTENT,
                priority=2,
                options=["‡πÑ‡∏ó‡∏¢", "‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©", "‡∏ó‡∏±‡πâ‡∏á‡πÑ‡∏ó‡∏¢-‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©", "‡∏´‡∏•‡∏≤‡∏¢‡∏†‡∏≤‡∏©‡∏≤"]
            ),
            
            # Business Questions
            "business_type": Question(
                id="business_type",
                text="üè¢ ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?",
                category=RequirementType.BUSINESS,
                priority=1,
                options=["‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤/E-commerce", "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó/‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£", "‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤", "‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß/‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå", "‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à"]
            ),
            
            "target_users": Question(
                id="target_users",
                text="üë• ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏∑‡∏≠‡πÉ‡∏Ñ‡∏£?",
                category=RequirementType.BUSINESS, 
                priority=2,
                options=["‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ", "‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó", "‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô/‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤", "‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç", "‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à"]
            )
        }
    
    def _load_keywords(self) -> Dict:
        """‡πÇ‡∏´‡∏•‡∏î keywords ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
        return {
            "vague_terms": [
                "‡∏™‡∏ß‡∏¢", "‡∏î‡∏µ", "‡πÄ‡∏à‡πã‡∏á", "‡∏á‡πà‡∏≤‡∏¢", "‡∏™‡∏∞‡∏î‡∏ß‡∏Å", "‡∏ó‡∏±‡∏ô‡∏™‡∏°‡∏±‡∏¢", 
                "‡∏õ‡∏Å‡∏ï‡∏¥", "‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤", "‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢ ‡πÜ", "‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", "‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á"
            ],
            "missing_details": [
                "‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå", "‡πÅ‡∏≠‡∏õ", "‡∏£‡∏∞‡∏ö‡∏ö", "‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°", "‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö",
                "‡πÅ‡∏≠‡∏û‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡πà‡∏ô", "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠", "platform"
            ],
            "color_keywords": [
                "‡∏™‡∏µ", "‡πÇ‡∏ó‡∏ô‡∏™‡∏µ", "‡∏™‡∏µ‡∏™‡∏±‡∏ô", "color", "theme"
            ],
            "feature_keywords": [
                "‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå", "‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô", "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥", "feature", "function"
            ]
        }
    
    def analyze_requirement(self, user_input: str, context: Dict = None) -> Tuple[Dict, List[Question]]:
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"""
        
        analysis = {
            "clarity_score": self._calculate_clarity_score(user_input),
            "detected_type": self._detect_project_type(user_input),
            "missing_aspects": self._find_missing_aspects(user_input),
            "vague_terms": self._find_vague_terms(user_input),
            "confidence_level": 0
        }
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡∏≤‡∏° analysis
        questions = self._generate_questions(analysis, user_input, context)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì confidence level
        analysis["confidence_level"] = self._calculate_confidence(analysis, user_input)
        
        return analysis, questions
    
    def _calculate_clarity_score(self, text: str) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô (0-100)"""
        score = 50  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 50%
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
        if len(text.split()) > 10:
            score += 20
        if len(text) > 50:
            score += 10
            
        # ‡∏•‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ñ‡πâ‡∏≤‡∏°‡∏µ vague terms
        vague_count = sum(1 for term in self.keywords["vague_terms"] 
                         if term in text.lower())
        score -= vague_count * 5
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ñ‡πâ‡∏≤‡∏°‡∏µ specific terms
        specific_terms = ["‡∏™‡∏µ", "‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå", "‡∏£‡∏∞‡∏ö‡∏ö", "‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "API"]
        specific_count = sum(1 for term in specific_terms 
                           if term in text.lower())
        score += specific_count * 5
        
        return max(0, min(100, score))
    
    def _detect_project_type(self, text: str) -> str:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå"""
        text_lower = text.lower()
        
        type_keywords = {
            "e_commerce": ["‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏Ç‡∏≤‡∏¢", "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "shop", "store", "ecommerce"],
            "portfolio": ["portfolio", "‡∏ú‡∏•‡∏á‡∏≤‡∏ô", "‡πÅ‡∏ü‡πâ‡∏°‡∏™‡∏∞‡∏™‡∏°‡∏ú‡∏•‡∏á‡∏≤‡∏ô", "‡πÇ‡∏ä‡∏ß‡πå"],
            "blog": ["blog", "‡∏ö‡∏•‡πá‡∏≠‡∏Å", "‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°", "‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô"],
            "landing_page": ["landing", "‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß", "‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ó"],
            "dashboard": ["dashboard", "‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î", "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô", "‡∏Å‡∏£‡∏≤‡∏ü"],
            "social": ["social", "‡πÇ‡∏ã‡πÄ‡∏ä‡∏µ‡∏¢‡∏•", "‡πÅ‡∏ä‡∏ó", "community"],
            "business": ["‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó", "‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£", "‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à", "corporate"],
            "education": ["‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤", "‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", "‡∏Ñ‡∏≠‡∏£‡πå‡∏™", "education"]
        }
        
        for project_type, keywords in type_keywords.items():
            if any(keyword in text_lower for keyword in keywords):
                return project_type
                
        return "general"
    
    def _find_missing_aspects(self, text: str) -> List[str]:
        """‡∏´‡∏≤ aspects ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ"""
        missing = []
        text_lower = text.lower()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ aspect
        aspects_to_check = {
            "color_scheme": ["‡∏™‡∏µ", "‡πÇ‡∏ó‡∏ô‡∏™‡∏µ", "color", "theme"],
            "layout": ["layout", "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö", "‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤", "design"],
            "functionality": ["‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå", "‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô", "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥", "feature"],
            "target_audience": ["‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤", "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", "‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢", "user"],
            "content_type": ["‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤", "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "content", "information"],
            "technology": ["‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ", "database", "api", "framework"]
        }
        
        for aspect, keywords in aspects_to_check.items():
            if not any(keyword in text_lower for keyword in keywords):
                missing.append(aspect)
                
        return missing
    
    def _find_vague_terms(self, text: str) -> List[str]:
        """‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô"""
        vague_found = []
        text_lower = text.lower()
        
        for term in self.keywords["vague_terms"]:
            if term in text_lower:
                vague_found.append(term)
                
        return vague_found
    
    def _generate_questions(self, analysis: Dict, user_input: str, context: Dict = None) -> List[Question]:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡∏≤‡∏° analysis"""
        questions = []
        
        # ‡∏ñ‡πâ‡∏≤ clarity score ‡∏ï‡πà‡∏≥ ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        if analysis["clarity_score"] < 70:
            
            # ‡∏ñ‡∏≤‡∏° project type ‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î
            if analysis["detected_type"] == "general":
                questions.append(Question(
                    id="clarify_project",
                    text="ü§î ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏∞‡πÑ‡∏£‡∏Ñ‡∏£‡∏±‡∏ö? (‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤, ‡πÅ‡∏≠‡∏õ todo, ‡∏´‡∏ô‡πâ‡∏≤ portfolio)",
                    category=RequirementType.BUSINESS,
                    priority=1
                ))
            
            # ‡∏ñ‡∏≤‡∏°‡∏ï‡∏≤‡∏° missing aspects
            for aspect in analysis["missing_aspects"][:3]:  # ‡∏ñ‡∏≤‡∏°‡πÅ‡∏Ñ‡πà 3 ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏£‡∏Å
                if aspect in self.question_templates:
                    questions.append(self.question_templates[aspect])
        
        # ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≤‡∏° project type
        project_specific_questions = self._get_project_specific_questions(analysis["detected_type"])
        questions.extend(project_specific_questions[:2])  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏Ñ‡πà 2 ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° priority
        questions.sort(key=lambda q: q.priority)
        
        return questions[:3]  # ‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏Ñ‡πà 3 ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏£‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ overwhelming
    
    def _get_project_specific_questions(self, project_type: str) -> List[Question]:
        """‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≤‡∏° project type"""
        
        type_questions = {
            "e_commerce": [
                self.question_templates["user_auth"],
                self.question_templates["target_users"],
                Question(
                    id="payment_method",
                    text="üí≥ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏´‡∏°?",
                    category=RequirementType.FUNCTIONALITY,
                    priority=2,
                    options=["‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£", "‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ", "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à"]
                )
            ],
            
            "portfolio": [
                self.question_templates["layout_style"],
                self.question_templates["content_type"],
                Question(
                    id="portfolio_sections",
                    text="üìÇ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏´‡∏ô? (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠)",
                    category=RequirementType.CONTENT,
                    priority=2,
                    options=["About Me", "Portfolio/‡∏ú‡∏•‡∏á‡∏≤‡∏ô", "Resume/‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥", "Contact", "Blog", "Services"]
                )
            ],
            
            "dashboard": [
                self.question_templates["data_storage"],
                Question(
                    id="chart_types",
                    text="üìä ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≤‡∏ü/‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô?",
                    category=RequirementType.FUNCTIONALITY,
                    priority=2,
                    options=["Bar Chart", "Line Chart", "Pie Chart", "Table", "‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à"]
                )
            ]
        }
        
        return type_questions.get(project_type, [])
    
    def _calculate_confidence(self, analysis: Dict, user_input: str) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"""
        
        base_confidence = analysis["clarity_score"] / 100
        
        # ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ñ‡πâ‡∏≤‡∏°‡∏µ missing aspects ‡πÄ‡∏¢‡∏≠‡∏∞
        missing_penalty = len(analysis["missing_aspects"]) * 0.1
        base_confidence -= missing_penalty
        
        # ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ñ‡πâ‡∏≤‡∏°‡∏µ vague terms ‡πÄ‡∏¢‡∏≠‡∏∞
        vague_penalty = len(analysis["vague_terms"]) * 0.05
        base_confidence -= vague_penalty
        
        return max(0, min(1, base_confidence))
    
    def format_questions_for_chat(self, questions: List[Question]) -> str:
        """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô chat"""
        
        if not questions:
            return ""
            
        formatted = "ü§î **‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:**\n\n"
        
        for i, q in enumerate(questions, 1):
            formatted += f"**{i}. {q.text}**\n"
            
            if q.options:
                for j, option in enumerate(q.options, 1):
                    formatted += f"   {j}. {option}\n"
            
            formatted += "\n"
        
        formatted += "üí° *‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡πÑ‡∏î‡πâ*"
        
        return formatted

# Global instance
requirement_analyzer = RequirementAnalyzer()

def analyze_user_requirement(user_input: str, context: Dict = None) -> Tuple[Dict, str]:
    """
    ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    
    Returns:
        Tuple[Dict, str]: (analysis_result, formatted_questions)
    """
    
    analysis, questions = requirement_analyzer.analyze_requirement(user_input, context)
    
    # ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏™‡∏π‡∏á‡∏û‡∏≠ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°
    if analysis["confidence_level"] >= 0.8:
        return analysis, ""
    
    # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
    formatted_questions = requirement_analyzer.format_questions_for_chat(questions)
    
    return analysis, formatted_questions