"""
üîß Image Path Fixer - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ path ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå
"""
import os
import re
import shutil
from pathlib import Path

class ImagePathFixer:
    def __init__(self, workspace_path="C:/agent/workspace"):
        self.workspace_path = workspace_path
        
    def scan_broken_images(self, site_path):
        """‡∏™‡πÅ‡∏Å‡∏ô‡∏´‡∏≤‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà path ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"""
        broken_images = []
        html_files = []
        
        # ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå HTML ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        for root, dirs, files in os.walk(site_path):
            for file in files:
                if file.endswith('.html'):
                    html_files.append(os.path.join(root, file))
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö path ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå
        for html_file in html_files:
            with open(html_file, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # ‡∏´‡∏≤ img src ‡πÅ‡∏•‡∏∞ background-image
            img_patterns = [
                r'src="([^"]*\.(jpg|jpeg|png|gif|webp))"',
                r"src='([^']*\.(jpg|jpeg|png|gif|webp))'",
                r'url\([\'"]?([^\'")]*\.(jpg|jpeg|png|gif|webp))[\'"]?\)',
                r'data-bg="([^"]*\.(jpg|jpeg|png|gif|webp))"'
            ]
            
            for pattern in img_patterns:
                matches = re.finditer(pattern, content, re.IGNORECASE)
                for match in matches:
                    img_path = match.group(1)
                    full_path = os.path.join(site_path, img_path.lstrip('./'))
                    
                    if not os.path.exists(full_path):
                        broken_images.append({
                            'file': html_file,
                            'path': img_path,
                            'full_path': full_path,
                            'pattern': match.group(0)
                        })
        
        return broken_images
    
    def get_available_images(self, site_path):
        """‡πÑ‡∏î‡πâ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á"""
        assets_images = os.path.join(site_path, 'assets', 'images')
        available_images = []
        
        if os.path.exists(assets_images):
            for file in os.listdir(assets_images):
                if file.lower().endswith(('.jpg', '.jpeg', '.png', '.gif', '.webp')):
                    available_images.append(file)
                    
        return sorted(available_images)
    
    def fix_broken_images(self, site_path):
        """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢"""
        print(f"üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç {os.path.basename(site_path)}...")
        
        broken_images = self.scan_broken_images(site_path)
        available_images = self.get_available_images(site_path)
        
        if not available_images:
            print(f"  ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô assets/images")
            return False
            
        print(f"  üìä ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏™‡∏µ‡∏¢: {len(broken_images)} ‡∏£‡∏π‡∏õ")
        print(f"  üìä ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏°‡∏µ: {len(available_images)} ‡∏£‡∏π‡∏õ")
        
        if not broken_images:
            print(f"  ‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û")
            return True
            
        # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏™‡∏µ‡∏¢‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏°‡∏µ
        fixed_files = set()
        replacement_idx = 0
        
        for broken in broken_images:
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏ó‡∏î‡πÅ‡∏ó‡∏ô
            if replacement_idx < len(available_images):
                replacement_img = available_images[replacement_idx]
                replacement_idx = (replacement_idx + 1) % len(available_images)
            else:
                replacement_img = available_images[0]
            
            # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà
            try:
                with open(broken['file'], 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà path ‡πÄ‡∏Å‡πà‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡πÉ‡∏´‡∏°‡πà
                old_path = broken['path']
                new_path = f"./assets/images/{replacement_img}"
                
                content = content.replace(old_path, new_path)
                
                with open(broken['file'], 'w', encoding='utf-8') as f:
                    f.write(content)
                    
                fixed_files.add(broken['file'])
                print(f"    üîÑ ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà: {os.path.basename(old_path)} ‚Üí {replacement_img}")
                
            except Exception as e:
                print(f"    ‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        
        print(f"  ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå: {len(fixed_files)} ‡πÑ‡∏ü‡∏•‡πå")
        return True
    
    def fix_all_websites(self):
        """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏∏‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡πÉ‡∏ô workspace"""
        print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå...\n")
        
        sites_fixed = 0
        for item in os.listdir(self.workspace_path):
            site_path = os.path.join(self.workspace_path, item)
            
            if os.path.isdir(site_path) and not item.startswith('.'):
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå (‡∏°‡∏µ index.html ‡∏´‡∏£‡∏∑‡∏≠ assets)
                has_html = any(f.endswith('.html') for f in os.listdir(site_path))
                has_assets = os.path.exists(os.path.join(site_path, 'assets'))
                
                if has_html or has_assets:
                    if self.fix_broken_images(site_path):
                        sites_fixed += 1
                    print()
        
        print(f"üéâ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: {sites_fixed} ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå")
        return sites_fixed

if __name__ == "__main__":
    fixer = ImagePathFixer()
    fixer.fix_all_websites()