#!/usr/bin/env python3
"""
üöÄ Lovable Clone - Real AI App Generator
‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å Chat ‡∏û‡∏£‡πâ‡∏≠‡∏° Effects ‡∏ô‡πà‡∏≤‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏ï‡πâ‡∏ô!
"""
import os
import json
import asyncio
import uuid
import time
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List, Optional

# Load environment variables
from dotenv import load_dotenv
load_dotenv()

from fastapi import FastAPI, WebSocket, WebSocketDisconnect, BackgroundTasks, Request, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse, FileResponse, HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.exceptions import RequestValidationError
from pydantic import BaseModel, ValidationError

# Real OpenAI Integration  
try:
    from openai import OpenAI
    from dotenv import load_dotenv
    load_dotenv()  # ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å .env file
    OPENAI_AVAILABLE = True
except ImportError as e:
    OPENAI_AVAILABLE = False
    print(f"‚ö†Ô∏è Missing dependencies: {e}")

class ChatRequest(BaseModel):
    message: str
    session_id: Optional[str] = None

class RealAI:
    """Real OpenAI AI integration with fallback"""
    
    def __init__(self, api_key: str = None):
        self.api_key = api_key or os.getenv('OPENAI_API_KEY')
        if OPENAI_AVAILABLE and self.api_key:
            self.client = OpenAI(api_key=self.api_key)
            self.use_real_ai = True
            print(f"üöÄ Using REAL OpenAI API! (key: ...{self.api_key[-10:]})")
        else:
            self.use_real_ai = False
            print("ü§ñ Using demo mode - set OPENAI_API_KEY for real AI")
        self.conversation_count = 0

    def chat_decide(self, messages: List[Dict]) -> Dict[str, Any]:
        """‡πÉ‡∏ä‡πâ OpenAI ‡∏à‡∏£‡∏¥‡∏á ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏à‡∏∞‡∏ñ‡∏≤‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ"""
        self.conversation_count += 1
        
        # ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ OpenAI ‡∏à‡∏£‡∏¥‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏™‡∏°‡∏≠
        try:
            if self.use_real_ai:
                # ‡πÉ‡∏ä‡πâ OpenAI ‡∏à‡∏£‡∏¥‡∏á
                system_prompt = """‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ AI ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ‡πÄ‡∏ß‡πá‡∏ö ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå ‡πÅ‡∏•‡∏∞ mobile app ‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏¥‡∏™‡∏£‡∏∞:

‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:
1. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏∞‡πÑ‡∏£‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏Ç‡∏≠ (‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢/‡∏Ñ‡∏∏‡∏¢‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ/‡πÄ‡∏ß‡πá‡∏ö)
2. ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô:
   - Website (‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
   - Web App (‡πÅ‡∏≠‡∏õ‡πÄ‡∏ß‡πá‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö)  
   - Mobile App (‡πÅ‡∏≠‡∏õ‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠)
   - Dashboard (‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°/‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô)
   - Portfolio (‡πÅ‡∏ü‡πâ‡∏°‡∏ú‡∏•‡∏á‡∏≤‡∏ô)
   - Blog (‡∏ö‡∏•‡πá‡∏≠‡∏Å)
   - E-commerce (‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå)
   - Game (‡πÄ‡∏Å‡∏°)
   - Tool (‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô)
   ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°

3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•

‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON:
{
    "action": "ask_question" ‡∏´‡∏£‡∏∑‡∏≠ "build_app",
    "message": "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ó‡∏¢ ‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á‡πÅ‡∏ï‡πà‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç",
    "requirements": {
        "app_type": "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô ‡πÄ‡∏ä‡πà‡∏ô website, webapp, mobile_app, dashboard, portfolio, blog, ecommerce, game, tool",
        "platform": "web, mobile, desktop ‡∏´‡∏£‡∏∑‡∏≠ hybrid", 
        "description": "‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ",
        "features": ["‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å", "‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏£‡∏≠‡∏á", "‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©"],
        "ui_style": "modern, minimal, colorful, professional, creative",
        "target_users": "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢"
    }
}"""
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á conversation context
                conversation = [{"role": "system", "content": system_prompt}]
                conversation.extend(messages[-3:])  # ‡πÄ‡∏≠‡∏≤‡πÅ‡∏Ñ‡πà 3 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î token
                
                response = self.client.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=conversation,
                    temperature=0.7,
                    max_tokens=500
                )
                
                content = response.choices[0].message.content.strip()
                print(f"ü§ñ OpenAI Raw Response: {content}")
                
                # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° parse JSON
                try:
                    # ‡∏•‡∏≠‡∏á‡∏´‡∏≤ JSON block
                    if '```json' in content:
                        json_part = content.split('```json')[1].split('```')[0].strip()
                    elif '```' in content:
                        json_part = content.split('```')[1].split('```')[0].strip()
                    elif '{' in content and '}' in content:
                        start = content.find('{')
                        end = content.rfind('}') + 1
                        json_part = content[start:end]
                    else:
                        json_part = content
                    
                    result = json.loads(json_part)
                    
                    # Validate required fields
                    if 'action' not in result:
                        result['action'] = 'ask_question'
                    if 'message' not in result:
                        result['message'] = content
                    
                    print(f"‚úÖ Parsed JSON: {result}")
                    return result
                    
                except json.JSONDecodeError as je:
                    print(f"‚ùå JSON Parse Error: {je}")
                    print(f"Raw content: {content}")
                    # Fallback: ‡∏™‡∏£‡πâ‡∏≤‡∏á response ‡πÄ‡∏≠‡∏á
                    user_msg = messages[-1]['content'].lower()
                    
                    if any(word in user_msg for word in ['‡∏™‡∏£‡πâ‡∏≤‡∏á', '‡∏ó‡∏≥', 'build', 'create']):
                        if any(word in user_msg for word in ['todo', '‡∏á‡∏≤‡∏ô', '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£']):
                            app_type = "todo_app"
                        elif any(word in user_msg for word in ['‡∏£‡πâ‡∏≤‡∏ô', 'shop', '‡∏Ç‡∏≤‡∏¢']):
                            app_type = "shop_app"
                        else:
                            app_type = "todo_app"
                        
                        return {
                            "action": "build_app",
                            "message": f"‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ {app_type} ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏¢ üöÄ\n\n{content}",
                            "requirements": {
                                "app_type": app_type,
                                "description": content,
                                "features": ["‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å", "‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"]
                            }
                        }
                    else:
                        return {
                            "action": "ask_question",
                            "message": content
                        }
            else:
                raise Exception("No OpenAI API key")
                
        except Exception as e:
            print(f"üîÑ OpenAI Error, using fallback: {e}")
            
            # Fallback mode - ‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
            user_msg = messages[-1]['content'].lower()
            
            if any(word in user_msg for word in ['todo', 'task', '‡∏á‡∏≤‡∏ô', '‡∏ó‡∏≥', '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£']):
                return {
                    "action": "build_app",
                    "message": "‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ Todo List ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏¢ üöÄ (Fallback Mode)",
                    "requirements": {
                        "app_type": "todo_app",
                        "description": "‡πÅ‡∏≠‡∏õ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô",
                        "features": ["‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô", "‡∏•‡∏ö‡∏á‡∏≤‡∏ô", "‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏™‡∏£‡πá‡∏à"]
                    }
                }
            elif any(word in user_msg for word in ['shop', '‡∏£‡πâ‡∏≤‡∏ô', '‡∏Ç‡∏≤‡∏¢', '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤']):
                return {
                    "action": "build_app", 
                    "message": "‡πÄ‡∏¢‡∏¥‡πà‡∏°! ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÉ‡∏´‡πâ üõçÔ∏è (Fallback Mode)",
                    "requirements": {
                        "app_type": "shop_app",
                        "description": "‡πÅ‡∏≠‡∏õ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå",
                        "features": ["‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤", "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"]
                    }
                }
            else:
                return {
                    "action": "ask_question",
                    "message": f"‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ! ‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏â‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞? ‡πÄ‡∏ä‡πà‡∏ô Todo List, ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤, ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏≠‡∏õ‡∏≠‡∏∑‡πà‡∏ô‡πÜ üòä\n\n(Mode: {'Real AI' if self.use_real_ai else 'Fallback'})"
                }

    def generate_plan(self, requirements: Dict) -> Dict:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤ ‡πÉ‡∏´‡πâ AI ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏≠‡∏á"""
        if self.use_real_ai:
            try:
                prompt = f"""‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÅ‡∏≠‡∏õ:

‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£: {requirements}

‡∏™‡∏£‡πâ‡∏≤‡∏á JSON plan ‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô:
{{
    "app_name": "‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°", 
    "description": "‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÅ‡∏≠‡∏õ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î",
    "app_type": "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏≠‡∏õ",
    "platform": "‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°",
    "features": ["‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå1", "‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå2"],
    "ui_theme": "‡∏ò‡∏µ‡∏° UI ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°",
    "color_scheme": "‡πÇ‡∏ó‡∏ô‡∏™‡∏µ",
    "target_audience": "‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢"
}}"""

                response = self.client.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=[{"role": "user", "content": prompt}],
                    temperature=0.7,
                    max_tokens=400
                )
                
                content = response.choices[0].message.content.strip()
                
                # Parse JSON response
                try:
                    if '```json' in content:
                        json_part = content.split('```json')[1].split('```')[0]
                    elif '{' in content:
                        json_part = content[content.find('{'):content.rfind('}')+1]
                    else:
                        json_part = content
                        
                    plan = json.loads(json_part)
                    print(f"üéØ AI Generated Plan: {plan}")
                    return plan
                except:
                    print("‚ö†Ô∏è Failed to parse AI plan, using fallback")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è AI Plan Error: {e}")
        
        # Fallback plan
        return {
            "app_name": "Amazing App",
            "description": requirements.get("description", "‡πÅ‡∏≠‡∏õ‡∏™‡∏∏‡∏î‡πÄ‡∏à‡πã‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ AI"),
            "app_type": requirements.get("app_type", "webapp"),
            "features": requirements.get("features", ["‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢", "‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°"])
        }

    def generate_code(self, file_type: str, plan: Dict) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏î‡πâ‡∏ß‡∏¢ AI ‡∏à‡∏£‡∏¥‡∏á‡πÜ"""
        if file_type != "frontend":
            return "# Backend/Database code would go here"
            
        app_name = plan.get('app_name', 'Amazing App')
        description = plan.get('description', '‡πÅ‡∏≠‡∏õ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ AI')
        app_type = plan.get('app_type', 'webapp')
        features = plan.get('features', [])
        ui_theme = plan.get('ui_theme', 'modern')
        
        # ‡πÉ‡∏ä‡πâ AI ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏£‡∏¥‡∏á‡πÜ
        if self.use_real_ai:
            try:
                prompt = f"""‡∏™‡∏£‡πâ‡∏≤‡∏á Single-Page Web Application ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå:

‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏õ: {app_name}
‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {app_type}
‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢: {description}
‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå: {', '.join(features)}
‡∏ò‡∏µ‡∏°: {ui_theme}

‡∏™‡∏£‡πâ‡∏≤‡∏á HTML5 ‡∏ó‡∏µ‡πà‡∏°‡∏µ:
- CSS ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡πÉ‡∏ô‡πÅ‡∏ö‡∏ö {ui_theme}
- JavaScript ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
- ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏° {features}
- ‡πÉ‡∏ä‡πâ localStorage ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
- ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞ emoji
- Responsive design
- Animation effects
- Error handling

‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏Ñ‡πâ‡∏î HTML ‡πÄ‡∏ï‡πá‡∏° ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢:"""

                response = self.client.chat.completions.create(
                    model="gpt-4o-mini",  # ‡πÉ‡∏ä‡πâ model ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏ß‡πà‡∏≤
                    messages=[{"role": "user", "content": prompt}],
                    temperature=0.3,
                    max_tokens=4000
                )
                
                ai_code = response.choices[0].message.content.strip()
                
                # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà AI ‡∏™‡πà‡∏á‡∏°‡∏≤
                if ai_code.startswith('```html'):
                    ai_code = ai_code.replace('```html', '').replace('```', '')
                elif ai_code.startswith('```'):
                    ai_code = ai_code.replace('```', '', 2)
                
                ai_code = ai_code.strip()
                
                print(f"üé® AI Generated {len(ai_code)} chars of code for {app_name}")
                return ai_code
                
            except Exception as e:
                print(f"‚ö†Ô∏è AI Code Generation Error: {e}")
                print("Falling back to template...")
                
                # ‡∏•‡∏ö markdown code block ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
                if '```html' in ai_code:
                    ai_code = ai_code.split('```html')[1].split('```')[0].strip()
                elif '```' in ai_code:
                    ai_code = ai_code.split('```')[1].split('```')[0].strip()
                
                print(f"ü§ñ AI Generated {len(ai_code)} characters of code")
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô HTML ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                if '<!DOCTYPE html>' in ai_code or '<html' in ai_code:
                    return ai_code
                else:
                    print("‚ùå AI code doesn't look like valid HTML, using template")
                    
            except Exception as e:
                print(f"‚ùå AI Code Generation Error: {e}")
        
        # Fallback ‡πÉ‡∏ä‡πâ template
        if file_type == "frontend":
            if app_type == 'shop_app':
                return '''<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üõçÔ∏è ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ AI</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }
        .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
        .header {
            text-align: center;
            color: white;
            margin-bottom: 40px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        .header h1 { font-size: 3em; margin-bottom: 10px; }
        .header p { font-size: 1.2em; opacity: 0.9; }
        
        .products-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin: 40px 0;
        }
        
        .product-card {
            background: white;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        
        .product-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 20px 40px rgba(0,0,0,0.3);
        }
        
        .product-title {
            font-size: 1.5em;
            color: #667eea;
            margin-bottom: 10px;
            font-weight: bold;
        }
        
        .product-description {
            color: #666;
            margin-bottom: 15px;
            line-height: 1.5;
        }
        
        .product-price {
            font-size: 1.8em;
            color: #e74c3c;
            font-weight: bold;
            margin-bottom: 15px;
        }
        
        .add-to-cart {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 1em;
            font-weight: bold;
            transition: all 0.3s ease;
            width: 100%;
        }
        
        .add-to-cart:hover {
            transform: scale(1.05);
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
        }
        
        .cart-info {
            position: fixed;
            top: 20px;
            right: 20px;
            background: #2ecc71;
            color: white;
            padding: 15px 20px;
            border-radius: 25px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            font-weight: bold;
        }
        
        .loading {
            text-align: center;
            color: white;
            font-size: 1.2em;
            margin: 40px 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üõçÔ∏è ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå</h1>
            <p>‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ AI - ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á!</p>
        </div>
        
        <div class="cart-info">
            üõí ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤: <span id="cart-count">0</span> ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        </div>
        
        <div class="products-grid">
            <div class="product-card">
                <div class="product-title">‡∏Å‡∏≤‡πÅ‡∏ü‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤‡πÇ‡∏ô</div>
                <div class="product-description">‡∏Å‡∏≤‡πÅ‡∏ü‡∏î‡∏≥‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏±‡∏ô ‡∏´‡∏≠‡∏°‡∏Å‡∏£‡∏∏‡πà‡∏ô</div>
                <div class="product-price">‡∏ø45</div>
                <button class="add-to-cart" onclick="addToCart('‡∏Å‡∏≤‡πÅ‡∏ü‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤‡πÇ‡∏ô', 45)">
                    ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ üõí
                </button>
            </div>
            
            <div class="product-card">
                <div class="product-title">‡∏•‡∏≤‡πÄ‡∏ï‡πâ</div>
                <div class="product-description">‡∏Å‡∏≤‡πÅ‡∏ü‡∏ô‡∏°‡∏™‡∏∏‡∏î‡∏≠‡∏£‡πà‡∏≠‡∏¢ ‡∏´‡∏ß‡∏≤‡∏ô‡∏°‡∏±‡∏ô</div>
                <div class="product-price">‡∏ø55</div>
                <button class="add-to-cart" onclick="addToCart('‡∏•‡∏≤‡πÄ‡∏ï‡πâ', 55)">
                    ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ üõí
                </button>
            </div>
            
            <div class="product-card">
                <div class="product-title">‡πÄ‡∏Ñ‡πâ‡∏Å‡∏ä‡πá‡∏≠‡∏Å‡πÇ‡∏Å‡πÅ‡∏•‡∏ï</div>
                <div class="product-description">‡πÄ‡∏Ñ‡πâ‡∏Å‡∏´‡∏ß‡∏≤‡∏ô‡∏°‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô ‡∏ô‡πà‡∏≤‡∏•‡∏¥‡πâ‡∏°‡∏•‡∏≠‡∏á</div>
                <div class="product-price">‡∏ø75</div>
                <button class="add-to-cart" onclick="addToCart('‡πÄ‡∏Ñ‡πâ‡∏Å‡∏ä‡πá‡∏≠‡∏Å‡πÇ‡∏Å‡πÅ‡∏•‡∏ï', 75)">
                    ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ üõí
                </button>
            </div>
        </div>
    </div>

    <script>
        let cart = [];
        
        function addToCart(name, price) {
            cart.push({name, price});
            updateCartDisplay();
            
            // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            const button = event.target;
            const originalText = button.innerHTML;
            button.innerHTML = '‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß!';
            button.style.background = '#2ecc71';
            
            setTimeout(() => {
                button.innerHTML = originalText;
                button.style.background = 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)';
            }, 1000);
        }
        
        function updateCartDisplay() {
            document.getElementById('cart-count').textContent = cart.length;
        }
    </script>
</body>
</html>'''
            else:
                # Default: Todo App
                return '''<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>‚úÖ Todo List - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ AI</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }
        .container { max-width: 800px; margin: 0 auto; padding: 20px; }
        .header {
            text-align: center;
            color: white;
            margin-bottom: 40px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        .header h1 { font-size: 3em; margin-bottom: 10px; }
        .header p { font-size: 1.2em; opacity: 0.9; }
        
        .todo-form {
            background: white;
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            margin-bottom: 30px;
        }
        
        .input-group {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        }
        
        .todo-input {
            flex: 1;
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 1em;
        }
        
        .add-btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1em;
            font-weight: bold;
            transition: all 0.3s ease;
        }
        
        .add-btn:hover {
            transform: scale(1.05);
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
        }
        
        .todos-container {
            background: white;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        }
        
        .todo-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 15px;
            border-bottom: 1px solid #eee;
            transition: all 0.3s ease;
        }
        
        .todo-item:hover {
            background: #f8f9fa;
        }
        
        .todo-text {
            flex: 1;
            font-size: 1.1em;
        }
        
        .todo-actions {
            display: flex;
            gap: 10px;
        }
        
        .complete-btn, .delete-btn {
            padding: 8px 16px;
            border: none;
            border-radius: 20px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.3s ease;
        }
        
        .complete-btn {
            background: #2ecc71;
            color: white;
        }
        
        .delete-btn {
            background: #e74c3c;
            color: white;
        }
        
        .complete-btn:hover, .delete-btn:hover {
            transform: scale(1.1);
        }
        
        .completed {
            text-decoration: line-through;
            opacity: 0.6;
        }
        
        .empty-state {
            text-align: center;
            color: #666;
            padding: 40px;
            font-size: 1.2em;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>‚úÖ Todo List</h1>
            <p>‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ AI - ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á!</p>
        </div>
        
        <div class="todo-form">
            <div class="input-group">
                <input type="text" id="todoInput" class="todo-input" placeholder="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà...">
                <button onclick="addTodo()" class="add-btn">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô ‚ûï</button>
            </div>
        </div>
        
        <div class="todos-container">
            <div id="todosContainer">
                <div class="empty-state">
                    ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì! üöÄ
                </div>
            </div>
        </div>
    </div>

    <script>
        let todos = [];
        let nextId = 1;
        
        function addTodo() {
            const input = document.getElementById('todoInput');
            const text = input.value.trim();
            
            if (text) {
                todos.push({
                    id: nextId++,
                    text: text,
                    completed: false
                });
                
                input.value = '';
                renderTodos();
                
                // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                input.style.background = '#d4edda';
                setTimeout(() => {
                    input.style.background = '';
                }, 500);
            }
        }
        
        function toggleTodo(id) {
            const todo = todos.find(t => t.id === id);
            if (todo) {
                todo.completed = !todo.completed;
                renderTodos();
            }
        }
        
        function deleteTodo(id) {
            todos = todos.filter(t => t.id !== id);
            renderTodos();
        }
        
        function renderTodos() {
            const container = document.getElementById('todosContainer');
            
            if (todos.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì! üöÄ
                    </div>
                `;
                return;
            }
            
            container.innerHTML = todos.map(todo => `
                <div class="todo-item">
                    <div class="todo-text ${todo.completed ? 'completed' : ''}">${todo.text}</div>
                    <div class="todo-actions">
                        <button class="complete-btn" onclick="toggleTodo(${todo.id})">
                            ${todo.completed ? '‚Ü©Ô∏è ‡πÄ‡∏•‡∏¥‡∏Å‡∏ó‡∏≥' : '‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à'}
                        </button>
                        <button class="delete-btn" onclick="deleteTodo(${todo.id})">
                            üóëÔ∏è ‡∏•‡∏ö
                        </button>
                    </div>
                </div>
            `).join('');
        }
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î Enter
        document.getElementById('todoInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                addTodo();
            }
        });
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        setTimeout(() => {
            todos.push(
                {id: nextId++, text: '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô HTML, CSS, JavaScript', completed: false},
                {id: nextId++, text: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Ñ‡πÅ‡∏£‡∏Å', completed: true},
                {id: nextId++, text: '‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡∏á‡∏≤‡∏ô‡∏™‡∏π‡πà‡πÇ‡∏•‡∏Å', completed: false}
            );
            renderTodos();
        }, 1000);
    </script>
</body>
</html>'''
        
        return "Default file content"

# ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
app = FastAPI(title="üöÄ Lovable Clone - AI App Generator")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    print(f"‚ùå Validation Error: {exc}")
    print(f"üì® Request body: {await request.body()}")
    return JSONResponse(
        status_code=422,
        content={
            "error": "Invalid request format",
            "details": str(exc.errors()),
            "message": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤"
        }
    )

# ‡πÅ‡∏•‡πâ‡∏ß AI
real_ai = RealAI()

# ‡πÄ‡∏Å‡πá‡∏ö session
sessions = {}

class ExcitingLovableAI:
    """AI ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ‡πÅ‡∏ö‡∏ö Exciting ‡∏û‡∏£‡πâ‡∏≠‡∏° Realtime Effects!"""
    
    def __init__(self):
        self.app_counter = 0
        self.workspace_dir = Path("generated_apps")
        self.workspace_dir.mkdir(exist_ok=True)

    async def _create_file_with_typing(self, websocket: WebSocket, file_path: str, content: str, description: str):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏£‡πâ‡∏≠‡∏° typing effect"""
        try:
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå
            await websocket.send_json({
                "type": "file_start",
                "file": file_path,
                "description": description
            })
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á
            full_path = self.workspace_dir / file_path
            full_path.parent.mkdir(parents=True, exist_ok=True)
            
            # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î ‡∏û‡∏£‡πâ‡∏≠‡∏° delay
            lines = content.split('\n')
            
            for i, line in enumerate(lines):
                # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå
                mode = 'w' if i == 0 else 'a'
                with open(full_path, mode, encoding='utf-8') as f:
                    f.write(line + '\n')
                
                # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö realtime
                await websocket.send_json({
                    "type": "typing_line",
                    "file": file_path,
                    "line": line,
                    "progress": (i + 1) / len(lines) * 100
                })
                
                # Delay ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏î‡∏π exciting
                await asyncio.sleep(0.01)  # ‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠ UX ‡∏ó‡∏µ‡πà‡∏î‡∏µ
            
            # ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
            await websocket.send_json({
                "type": "file_complete",
                "file": file_path,
                "message": f"‚úÖ {description} ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!"
            })
            
        except Exception as e:
            await websocket.send_json({
                "type": "error",
                "message": f"‚ùå Error creating {file_path}: {str(e)}"
            })

    async def generate_app_exciting(self, websocket: WebSocket, requirements: Dict):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ ‡∏û‡∏£‡πâ‡∏≠‡∏° exciting effects ‡πÅ‡∏ö‡∏ö realtime!"""
        
        self.app_counter += 1
        app_name = f"app_{self.app_counter}"
        
        try:
            # üéØ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            await websocket.send_json({
                "type": "status",
                "message": "üß† AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£...",
                "progress": 10
            })
            await asyncio.sleep(1)
            
            plan = real_ai.generate_plan(requirements)
            
            # üéØ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
            await websocket.send_json({
                "type": "status",
                "message": "üìÅ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Ñ...",
                "progress": 20
            })
            await asyncio.sleep(0.5)
            
            # üéØ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏™‡∏£‡πâ‡∏≤‡∏á Frontend
            await websocket.send_json({
                "type": "status", 
                "message": "üé® AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö User Interface...",
                "progress": 40
            })
            
            frontend_code = real_ai.generate_code("frontend", plan)
            await self._create_file_with_typing(
                websocket,
                f"{app_name}/index.html",
                frontend_code,
                "‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏´‡∏•‡∏±‡∏Å (Frontend)"
            )
            
            # üéØ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà 4: ‡∏™‡πà‡∏á preview
            await websocket.send_json({
                "type": "preview_ready",
                "html_content": frontend_code,
                "app_name": plan["app_name"],
                "progress": 80
            })
            
            await asyncio.sleep(1)
            
            # üéØ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà 5: ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!
            await websocket.send_json({
                "type": "build_complete",
                "message": f"üéâ ‡∏™‡∏£‡πâ‡∏≤‡∏á {plan['app_name']} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢",
                "app_path": f"generated_apps/{app_name}",
                "progress": 100
            })
            
        except Exception as e:
            await websocket.send_json({
                "type": "error",
                "message": f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"
            })

# ‡∏™‡∏£‡πâ‡∏≤‡∏á AI instance
exciting_ai = ExcitingLovableAI()

@app.get("/")
async def home():
    return {"message": "üöÄ Lovable Clone AI Server - Ready!", "status": "online"}

@app.post("/chat")
async def chat_endpoint(request: ChatRequest):
    """Chat ‡∏´‡∏•‡∏±‡∏Å - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏∏‡∏¢‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ"""
    
    print(f"üì® Received request: {request}")
    
    session_id = request.session_id or str(uuid.uuid4())
    
    if session_id not in sessions:
        sessions[session_id] = {
            "messages": [],
            "created_at": datetime.now()
        }
    
    session = sessions[session_id]
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á user
    session['messages'].append({
        "role": "user", 
        "content": request.message
    })
    
    try:
        # ‡πÉ‡∏´‡πâ AI ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
        decision = real_ai.chat_decide(session['messages'])
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
        session['messages'].append({
            "role": "assistant",
            "content": decision['message']
        })
        
        return {
            "response": decision['message'],
            "action": decision['action'],
            "session_id": session_id,
            "requirements": decision.get('requirements'),
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        print(f"‚ùå Chat error: {str(e)}")
        return JSONResponse(
            status_code=500,
            content={"error": f"Chat error: {str(e)}"}
        )

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """WebSocket ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö realtime app building"""
    await websocket.accept()
    
    try:
        while True:
            data = await websocket.receive_json()
            
            if data.get("action") == "build_app":
                requirements = data.get("requirements", {})
                await exciting_ai.generate_app_exciting(websocket, requirements)
            
    except WebSocketDisconnect:
        print("WebSocket disconnected")

@app.get("/health")
async def health_check():
    return {
        "status": "healthy",
        "ai_mode": "real" if real_ai.use_real_ai else "demo",
        "timestamp": datetime.now().isoformat()
    }

if __name__ == "__main__":
    import uvicorn
    print("üöÄ Starting Exciting Lovable Backend...")
    print("ü§ñ Using demo mode - set OPENAI_API_KEY for real AI")
    print("üìç Server: http://localhost:8006")
    print("üîå WebSocket: ws://localhost:8006/ws")
    uvicorn.run(app, host="0.0.0.0", port=8006, log_level="info")