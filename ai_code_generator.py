#!/usr/bin/env python3
"""
üöÄ Simple AI Code Generator - ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà mockup!
‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ AI ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á ‡πÜ
"""
import os
import json
import asyncio
from pathlib import Path
from datetime import datetime
from typing import Dict, Any, List, Optional

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import JSONResponse, FileResponse
from pydantic import BaseModel
from openai import OpenAI

# Load environment
from dotenv import load_dotenv
load_dotenv()

# Configuration
API_KEY = os.getenv("OPENAI_API_KEY")
if not API_KEY:
    raise RuntimeError("‚ùå OPENAI_API_KEY is required!")

client = OpenAI(api_key=API_KEY)
WORKSPACE = Path("C:/agent/generated_apps")
WORKSPACE.mkdir(parents=True, exist_ok=True)

# FastAPI App
app = FastAPI(title="AI Code Generator", description="ü§ñ AI ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á ‡πÜ")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Mount generated apps
app.mount("/apps", StaticFiles(directory=str(WORKSPACE)), name="generated_apps")

# Models
class CodeRequest(BaseModel):
    prompt: str
    app_type: str = "mobile"  # mobile, web, desktop
    framework: str = "react_native"  # react_native, flutter, react, vue

class CodeResponse(BaseModel):
    success: bool
    message: str
    app_path: Optional[str] = None
    app_url: Optional[str] = None
    files_created: int = 0
    code_preview: Optional[str] = None
    error: Optional[str] = None

# AI Code Generation Functions
async def generate_mobile_app_with_ai(prompt: str, framework: str = "react_native") -> Dict[str, Any]:
    """‡πÉ‡∏ä‡πâ AI ‡∏™‡∏£‡πâ‡∏≤‡∏á Mobile App ‡∏à‡∏£‡∏¥‡∏á ‡πÜ"""
    
    try:
        # AI Prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Mobile App
        ai_prompt = f"""
‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô expert mobile app developer ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á {framework} app ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á

User Request: {prompt}

‡∏™‡∏£‡πâ‡∏≤‡∏á mobile app ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏ï‡∏≤‡∏° request ‡πÇ‡∏î‡∏¢:

1. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å prompt
2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á app ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°  
3. ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á ‡∏°‡∏µ navigation, state management
4. ‡πÉ‡∏ä‡πâ UI components ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à
5. ‡∏°‡∏µ error handling ‡πÅ‡∏•‡∏∞ loading states

‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON format:
{{
    "app_name": "‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏õ",
    "description": "‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÅ‡∏≠‡∏õ", 
    "main_component": "‡πÇ‡∏Ñ‡πâ‡∏î App.tsx ‡∏´‡∏•‡∏±‡∏Å (‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)",
    "package_json": "package.json configuration",
    "additional_files": [
        {{"filename": "components/Header.tsx", "content": "‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏ü‡∏•‡πå"}},
        {{"filename": "screens/HomeScreen.tsx", "content": "‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏ü‡∏•‡πå"}}
    ]
}}

‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡πâ‡∏≠‡∏á:
- ‡πÉ‡∏ä‡πâ TypeScript
- ‡∏°‡∏µ proper imports
- ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà mockup
- ‡∏°‡∏µ state management
- responsive design
- ‡πÉ‡∏™‡πà comments ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ó‡∏¢
"""

        print(f"ü§ñ AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á mobile app: {prompt}")
        
        response = client.chat.completions.create(
            model="gpt-4o",  # ‡πÉ‡∏ä‡πâ model ‡∏î‡∏µ‡∏™‡∏∏‡∏î
            messages=[
                {"role": "system", "content": "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô expert mobile app developer ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á"},
                {"role": "user", "content": ai_prompt}
            ],
            max_tokens=4000,
            temperature=0.3
        )
        
        ai_response = response.choices[0].message.content.strip()
        
        # Parse AI response
        if ai_response.startswith('```json'):
            ai_response = ai_response.replace('```json', '').replace('```', '')
        
        app_data = json.loads(ai_response)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏≠‡∏õ
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        app_name = app_data.get('app_name', 'mobile_app').replace(' ', '_')
        app_dir = WORKSPACE / f"{app_name}_{timestamp}"
        app_dir.mkdir(parents=True, exist_ok=True)
        
        files_created = 0
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á package.json
        if app_data.get('package_json'):
            package_file = app_dir / "package.json"
            with open(package_file, 'w', encoding='utf-8') as f:
                if isinstance(app_data['package_json'], str):
                    f.write(app_data['package_json'])
                else:
                    json.dump(app_data['package_json'], f, indent=2, ensure_ascii=False)
            files_created += 1
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á App.tsx ‡∏´‡∏•‡∏±‡∏Å
        if app_data.get('main_component'):
            main_file = app_dir / "App.tsx"
            with open(main_file, 'w', encoding='utf-8') as f:
                f.write(app_data['main_component'])
            files_created += 1
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        if app_data.get('additional_files'):
            for file_info in app_data['additional_files']:
                file_path = app_dir / file_info['filename']
                file_path.parent.mkdir(parents=True, exist_ok=True)
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(file_info['content'])
                files_created += 1
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á README.md
        readme_content = f"""# {app_data.get('app_name', 'Mobile App')}

{app_data.get('description', 'AI Generated Mobile Application')}

## ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á

```bash
npm install
# ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö React Native
npx react-native run-android
npx react-native run-ios
```

## ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå

- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ AI ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
- ‡πÉ‡∏ä‡πâ {framework}
- ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà mockup)
- Generated: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

## ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå

- App.tsx - Main component
- components/ - UI Components  
- screens/ - App Screens
- package.json - Dependencies
"""
        
        readme_file = app_dir / "README.md"
        with open(readme_file, 'w', encoding='utf-8') as f:
            f.write(readme_content)
        files_created += 1
        
        return {
            'success': True,
            'app_path': str(app_dir),
            'app_url': f"/apps/{app_dir.name}",
            'files_created': files_created,
            'code_preview': app_data.get('main_component', '')[:500] + "...",
            'message': f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á {app_data.get('app_name')} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ({files_created} ‡πÑ‡∏ü‡∏•‡πå)"
        }
        
    except json.JSONDecodeError as e:
        return {
            'success': False,
            'error': f"AI response ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {str(e)}",
            'message': "‚ùå AI ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
        }
    except Exception as e:
        return {
            'success': False,
            'error': str(e),
            'message': f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"
        }

async def generate_web_app_with_ai(prompt: str, framework: str = "react") -> Dict[str, Any]:
    """‡πÉ‡∏ä‡πâ AI ‡∏™‡∏£‡πâ‡∏≤‡∏á Web App ‡∏à‡∏£‡∏¥‡∏á ‡πÜ"""
    
    try:
        ai_prompt = f"""
‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô expert web developer ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á {framework} web application

User Request: {prompt}

‡∏™‡∏£‡πâ‡∏≤‡∏á web application ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏ï‡∏≤‡∏° request ‡πÇ‡∏î‡∏¢:

1. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å prompt
2. ‡∏™‡∏£‡πâ‡∏≤‡∏á responsive web app
3. ‡πÉ‡∏ä‡πâ modern CSS ‡πÅ‡∏•‡∏∞ JavaScript
4. ‡∏°‡∏µ interactive features
5. ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà static

‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON format:
{{
    "app_name": "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå",
    "description": "‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢",
    "index_html": "‡πÇ‡∏Ñ‡πâ‡∏î HTML ‡∏´‡∏•‡∏±‡∏Å (‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô)",
    "styles_css": "‡πÇ‡∏Ñ‡πâ‡∏î CSS (‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏° responsive)",
    "script_js": "‡πÇ‡∏Ñ‡πâ‡∏î JavaScript (interactive)",
    "additional_files": [
        {{"filename": "components.js", "content": "‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏ü‡∏•‡πå"}}
    ]
}}

‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ï‡πâ‡∏≠‡∏á:
- Responsive design
- Modern UI/UX
- Interactive features
- ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏ö‡∏ô browser
- ‡πÉ‡∏™‡πà comments ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ó‡∏¢
"""

        print(f"üåê AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á web app: {prompt}")
        
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô expert web developer ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á"},
                {"role": "user", "content": ai_prompt}
            ],
            max_tokens=4000,
            temperature=0.3
        )
        
        ai_response = response.choices[0].message.content.strip()
        
        if ai_response.startswith('```json'):
            ai_response = ai_response.replace('```json', '').replace('```', '')
        
        app_data = json.loads(ai_response)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        app_name = app_data.get('app_name', 'web_app').replace(' ', '_')
        app_dir = WORKSPACE / f"{app_name}_{timestamp}"
        app_dir.mkdir(parents=True, exist_ok=True)
        
        files_created = 0
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á index.html
        if app_data.get('index_html'):
            with open(app_dir / "index.html", 'w', encoding='utf-8') as f:
                f.write(app_data['index_html'])
            files_created += 1
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á styles.css
        if app_data.get('styles_css'):
            with open(app_dir / "styles.css", 'w', encoding='utf-8') as f:
                f.write(app_data['styles_css'])
            files_created += 1
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á script.js
        if app_data.get('script_js'):
            with open(app_dir / "script.js", 'w', encoding='utf-8') as f:
                f.write(app_data['script_js'])
            files_created += 1
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        if app_data.get('additional_files'):
            for file_info in app_data['additional_files']:
                file_path = app_dir / file_info['filename']
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(file_info['content'])
                files_created += 1
        
        return {
            'success': True,
            'app_path': str(app_dir),
            'app_url': f"/apps/{app_dir.name}/index.html",
            'files_created': files_created,
            'code_preview': app_data.get('index_html', '')[:500] + "...",
            'message': f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á {app_data.get('app_name')} ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ({files_created} ‡πÑ‡∏ü‡∏•‡πå)"
        }
        
    except Exception as e:
        return {
            'success': False,
            'error': str(e),
            'message': f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå: {str(e)}"
        }

# API Endpoints
@app.get("/health")
async def health_check():
    """Health check"""
    return {
        "status": "healthy",
        "message": "ü§ñ AI Code Generator ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô!",
        "timestamp": datetime.now().isoformat(),
        "workspace": str(WORKSPACE),
        "openai_available": bool(API_KEY)
    }

@app.post("/generate", response_model=CodeResponse)
async def generate_code(request: CodeRequest):
    """üöÄ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏î‡πâ‡∏ß‡∏¢ AI ‡∏à‡∏£‡∏¥‡∏á ‡πÜ"""
    
    try:
        print(f"üéØ Request: {request.prompt} | Type: {request.app_type} | Framework: {request.framework}")
        
        if request.app_type == "mobile":
            result = await generate_mobile_app_with_ai(request.prompt, request.framework)
        elif request.app_type == "web":
            result = await generate_web_app_with_ai(request.prompt, request.framework)
        else:
            return CodeResponse(
                success=False,
                message="‚ùå ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ mobile ‡πÅ‡∏•‡∏∞ web app ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
                error="Unsupported app_type"
            )
        
        return CodeResponse(**result)
        
    except Exception as e:
        return CodeResponse(
            success=False,
            message=f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}",
            error=str(e)
        )

@app.get("/apps/{app_name}")
async def view_app(app_name: str):
    """‡∏î‡∏π‡πÅ‡∏≠‡∏õ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß"""
    app_dir = WORKSPACE / app_name
    
    if not app_dir.exists():
        raise HTTPException(status_code=404, detail="‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏≠‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£")
    
    # ‡∏´‡∏≤ index file
    index_files = ["index.html", "App.tsx", "README.md"]
    
    for index_file in index_files:
        if (app_dir / index_file).exists():
            return FileResponse(app_dir / index_file)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå
    files = [f.name for f in app_dir.iterdir() if f.is_file()]
    return {"app_name": app_name, "files": files}

@app.get("/list")
async def list_generated_apps():
    """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏≠‡∏õ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß"""
    
    apps = []
    for app_dir in WORKSPACE.iterdir():
        if app_dir.is_dir():
            files = [f.name for f in app_dir.iterdir() if f.is_file()]
            apps.append({
                "name": app_dir.name,
                "path": str(app_dir),
                "url": f"/apps/{app_dir.name}",
                "files": files,
                "created": datetime.fromtimestamp(app_dir.stat().st_ctime).isoformat()
            })
    
    return {"apps": apps, "total": len(apps)}

if __name__ == "__main__":
    import uvicorn
    
    print("üöÄ Starting AI Code Generator...")
    print(f"üìÅ Workspace: {WORKSPACE}")
    print(f"üîë OpenAI API: {'‚úÖ' if API_KEY else '‚ùå'}")
    print("üìä API Documentation: http://localhost:8001/docs")
    print("üîç Health Check: http://localhost:8001/health")
    print("üì± Generated Apps: http://localhost:8001/list")
    
    uvicorn.run(app, host="0.0.0.0", port=8001, log_level="info")