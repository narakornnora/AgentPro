#!/usr/bin/env python3
"""
üéØ AI Workflow Designer Agent
‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ‚Üí ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö Workflow ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á App Architecture
"""
import os
import json
from datetime import datetime
from typing import Dict, List, Any
from openai import OpenAI
from dotenv import load_dotenv

# Load environment
load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

class WorkflowDesignerAgent:
    """AI Agent ‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö Workflow ‡πÅ‡∏•‡∏∞ App Architecture"""
    
    def __init__(self):
        self.conversation_history = []
        
    def intelligent_project_analysis(self, customer_input: str) -> Dict[str, Any]:
        """üß† Step 1: AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£"""
        
        analysis_prompt = f"""
‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô AI Project Analyzer ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡πÅ‡∏¢‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£

Customer Input: "{customer_input}"

‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏• ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö JSON:

{{
    "project_type_analysis": {{
        "primary_type": "mobile_app|web_app|website|desktop_app|api_service|system_integration",
        "confidence": 0.95,
        "reasoning": "‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å type ‡∏ô‡∏µ‡πâ",
        "alternative_types": ["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ"],
        "keywords_detected": ["‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô"]
    }},
    
    "platform_recommendations": {{
        "recommended_platform": "iOS + Android|Web Browser|Desktop|Cross-platform",
        "reasoning": "‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å platform",
        "considerations": ["‡∏Ç‡πâ‡∏≠‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"]
    }},
    
    "business_analysis": {{
        "business_type": "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à (ecommerce, social, productivity, etc.)",
        "target_audience": ["‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏Å"],
        "main_objectives": ["‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏´‡∏•‡∏±‡∏Å"],
        "key_problems": ["‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"],
        "success_metrics": ["‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"]
    }},
    
    "technical_complexity": {{
        "complexity_level": "simple|medium|complex|enterprise",
        "estimated_screens": 5,
        "estimated_features": 8,
        "development_time": "2-4 weeks",
        "team_size": "1-3 developers"
    }},
    
    "immediate_questions": [
        "‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏ñ‡∏≤‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° 1",
        "‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏ñ‡∏≤‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° 2"
    ],
    
    "next_steps": [
        "‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ 1",
        "‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ 2"
    ]
}}

‡∏Å‡∏é‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:
- ‡∏°‡∏µ "‡πÅ‡∏≠‡∏õ", "mobile", "‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î", "App Store", "Google Play" ‚Üí mobile_app
- ‡∏°‡∏µ "‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå", "website", "‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö", "‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå", "‡πÇ‡∏ä‡∏ß‡πå‡∏ú‡∏•‡∏á‡∏≤‡∏ô" ‚Üí website  
- ‡∏°‡∏µ "‡∏£‡∏∞‡∏ö‡∏ö", "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£", "dashboard", "admin", "web app", "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏ß‡πá‡∏ö" ‚Üí web_app
- ‡∏°‡∏µ "API", "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠", "integration", "service" ‚Üí api_service
- ‡∏°‡∏µ "‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°", "desktop", "PC", "‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå" ‚Üí desktop_app

‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å context ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á
"""
        
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": analysis_prompt}],
            response_format={"type": "json_object"}
        )
        
        return json.loads(response.choices[0].message.content)
    
    def design_user_journey(self, requirements: Dict[str, Any]) -> Dict[str, Any]:
        """Step 2: ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö User Journey ‡πÅ‡∏•‡∏∞ Workflow"""
        
        journey_prompt = f"""
‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô UX Designer ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö User Journey

Requirements: {json.dumps(requirements, ensure_ascii=False, indent=2)}

‡πÇ‡∏õ‡∏£‡∏î‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö User Journey ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÉ‡∏ô JSON format:

{{
    "user_personas": [
        {{
            "name": "‡∏ä‡∏∑‡πà‡∏≠ Persona",
            "description": "‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢",
            "pain_points": ["‡∏à‡∏∏‡∏î‡πÄ‡∏à‡∏á 1", "‡∏à‡∏∏‡∏î‡πÄ‡∏à‡∏á 2"],
            "goals": ["‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ 1", "‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ 2"]
        }}
    ],
    "user_journeys": [
        {{
            "persona": "‡∏ä‡∏∑‡πà‡∏≠ Persona",
            "scenario": "‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
            "steps": [
                {{
                    "step": 1,
                    "action": "‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥",
                    "screen": "‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á",
                    "emotions": "‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ",
                    "pain_points": ["‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î"],
                    "opportunities": ["‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á"]
                }}
            ]
        }}
    ],
    "key_workflows": [
        {{
            "workflow_name": "‡∏ä‡∏∑‡πà‡∏≠ Workflow",
            "description": "‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢",
            "trigger": "‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô workflow",
            "steps": [
                {{
                    "step": 1,
                    "actor": "‡πÉ‡∏Ñ‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏≥",
                    "action": "‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£",
                    "input": "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà",
                    "output": "‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ",
                    "validation": "‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö",
                    "error_handling": "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"
                }}
            ],
            "success_criteria": ["‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"],
            "failure_scenarios": ["‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"]
        }}
    ]
}}

‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ó‡∏∏‡∏Å use case ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
"""
        
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": journey_prompt}],
            response_format={"type": "json_object"}
        )
        
        return json.loads(response.choices[0].message.content)
    
    def design_app_architecture(self, requirements: Dict[str, Any], user_journey: Dict[str, Any]) -> Dict[str, Any]:
        """Step 3: ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö App Architecture ‡πÅ‡∏•‡∏∞ Technical Specifications"""
        
        architecture_prompt = f"""
‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô Solution Architect ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏£‡∏∞‡∏ö‡∏ö

Requirements: {json.dumps(requirements, ensure_ascii=False, indent=2)}
User Journey: {json.dumps(user_journey, ensure_ascii=False, indent=2)}

‡πÇ‡∏õ‡∏£‡∏î‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö App Architecture ‡πÉ‡∏ô JSON format:

{{
    "app_overview": {{
        "app_name": "‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏õ",
        "app_type": "mobile/web/hybrid",
        "platform": ["iOS", "Android", "Web"],
        "tech_stack": {{
            "frontend": ["‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ frontend"],
            "backend": ["‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏à‡∏µ backend"],
            "database": "‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
            "cloud": "cloud services",
            "third_party": ["third party services"]
        }}
    }},
    "screens_structure": [
        {{
            "screen_name": "‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠",
            "screen_type": "navigation/input/display/action",
            "description": "‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠",
            "components": [
                {{
                    "component": "‡∏ä‡∏∑‡πà‡∏≠ component",
                    "type": "button/input/list/card/etc",
                    "functionality": "‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏∞‡πÑ‡∏£",
                    "data_needed": ["‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ"],
                    "interactions": ["‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö"]
                }}
            ],
            "navigation": {{
                "from": ["‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏´‡∏ô‡πÑ‡∏î‡πâ‡∏ö‡πâ‡∏≤‡∏á"],
                "to": ["‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏´‡∏ô‡πÑ‡∏î‡πâ‡∏ö‡πâ‡∏≤‡∏á"],
                "conditions": ["‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á"]
            }}
        }}
    ],
    "data_models": [
        {{
            "model_name": "‡∏ä‡∏∑‡πà‡∏≠ Model",
            "description": "‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢",
            "fields": [
                {{
                    "field": "‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå",
                    "type": "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
                    "required": true/false,
                    "validation": "‡∏Å‡∏é‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö",
                    "description": "‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢"
                }}
            ],
            "relationships": ["‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ö model ‡∏≠‡∏∑‡πà‡∏ô"]
        }}
    ],
    "api_endpoints": [
        {{
            "endpoint": "/api/path",
            "method": "GET/POST/PUT/DELETE",
            "description": "‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢",
            "input": {{"field": "type"}},
            "output": {{"field": "type"}},
            "authentication": "required/optional/none",
            "validation": ["‡∏Å‡∏é‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"]
        }}
    ],
    "features_priority": {{
        "mvp": ["‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô"],
        "phase_2": ["‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà 2"],
        "nice_to_have": ["‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏™‡∏£‡∏¥‡∏°"]
    }},
    "development_phases": [
        {{
            "phase": 1,
            "name": "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ü‡∏™",
            "duration": "‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤",
            "deliverables": ["‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö"],
            "dependencies": ["‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡πà‡∏≠‡∏ô"],
            "risks": ["‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á"]
        }}
    ]
}}

‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏≥‡πÑ‡∏õ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
"""
        
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": architecture_prompt}],
            response_format={"type": "json_object"}
        )
        
        return json.loads(response.choices[0].message.content)
    
    def create_development_roadmap(self, architecture: Dict[str, Any]) -> Dict[str, Any]:
        """Step 4: ‡∏™‡∏£‡πâ‡∏≤‡∏á Development Roadmap ‡πÅ‡∏•‡∏∞ Testing Strategy"""
        
        roadmap_prompt = f"""
‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô Project Manager ‡πÅ‡∏•‡∏∞ QA Lead ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå

Architecture: {json.dumps(architecture, ensure_ascii=False, indent=2)}

‡πÇ‡∏õ‡∏£‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á Development Roadmap ‡πÅ‡∏•‡∏∞ Testing Strategy ‡πÉ‡∏ô JSON format:

{{
    "development_roadmap": {{
        "total_timeline": "‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏°",
        "milestones": [
            {{
                "milestone": "‡∏ä‡∏∑‡πà‡∏≠ milestone",
                "week": "‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà",
                "deliverables": ["‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö"],
                "success_criteria": ["‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"],
                "demo_scenario": "‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞ demo"
            }}
        ]
    }},
    "testing_strategy": {{
        "unit_tests": [
            {{
                "component": "‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö",
                "test_cases": ["test case 1", "test case 2"],
                "coverage_target": "‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ coverage"
            }}
        ],
        "integration_tests": [
            {{
                "flow": "‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö",
                "scenarios": ["‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö"],
                "expected_results": ["‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á"]
            }}
        ],
        "user_acceptance_tests": [
            {{
                "user_story": "User story",
                "acceptance_criteria": ["‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö"],
                "test_steps": ["‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"]
            }}
        ]
    }},
    "deployment_plan": {{
        "environments": ["dev", "staging", "production"],
        "deployment_steps": ["‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£ deploy"],
        "rollback_plan": ["‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£ rollback"],
        "monitoring": ["‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á monitor"]
    }},
    "success_metrics": {{
        "technical": ["‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ"],
        "business": ["‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å‡∏ó‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à"],
        "user_experience": ["‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å UX"]
    }}
}}

‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
"""
        
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": roadmap_prompt}],
            response_format={"type": "json_object"}
        )
        
        return json.loads(response.choices[0].message.content)
    
    def generate_complete_workflow(self, customer_input: str) -> Dict[str, Any]:
        """‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô Complete Workflow"""
        
        print("üîç Step 1: Analyzing customer requirements...")
        requirements = self.analyze_customer_requirements(customer_input)
        
        print("üéØ Step 2: Designing user journey and workflows...")
        user_journey = self.design_user_journey(requirements)
        
        print("üèóÔ∏è Step 3: Creating app architecture...")
        architecture = self.design_app_architecture(requirements, user_journey)
        
        print("üìã Step 4: Building development roadmap...")
        roadmap = self.create_development_roadmap(architecture)
        
        # ‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô Complete Workflow
        complete_workflow = {
            "project_id": f"project_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            "created_at": datetime.now().isoformat(),
            "customer_input": customer_input,
            "requirements_analysis": requirements,
            "user_journey_design": user_journey,
            "app_architecture": architecture,
            "development_roadmap": roadmap,
            "next_steps": [
                "Review ‡πÅ‡∏•‡∏∞ approve workflow design",
                "‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° development environment",
                "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Phase 1 development",
                "Setup CI/CD pipeline",
                "‡πÄ‡∏£‡∏¥‡πà‡∏° Unit testing"
            ]
        }
        
        return complete_workflow
    
    def save_workflow(self, workflow: Dict[str, Any], output_path: str = "workflows"):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Workflow ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå"""
        os.makedirs(output_path, exist_ok=True)
        
        project_id = workflow["project_id"]
        filename = f"{output_path}/{project_id}_complete_workflow.json"
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(workflow, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ Workflow saved to: {filename}")
        return filename

def main():
    """Test the Workflow Designer Agent"""
    
    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    agent = WorkflowDesignerAgent()
    
    customer_inputs = [
        "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÑ‡∏î‡πâ ‡πÅ‡∏•‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏î‡∏π‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå",
        "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å‡∏™‡∏±‡∏ï‡∏ß‡πÅ‡∏û‡∏ó‡∏¢‡πå ‡∏°‡∏µ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢ ‡πÄ‡∏ß‡∏ä‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô ‡πÅ‡∏•‡∏∞‡∏ö‡∏¥‡∏•",
        "‡πÅ‡∏≠‡∏õ‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢ ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡∏°‡∏µ personal trainer"
    ]
    
    for i, customer_input in enumerate(customer_inputs, 1):
        print(f"\n{'='*50}")
        print(f"üöÄ Example {i}: {customer_input}")
        print(f"{'='*50}")
        
        try:
            workflow = agent.generate_complete_workflow(customer_input)
            filename = agent.save_workflow(workflow)
            
            print(f"\nüìä Workflow Summary:")
            print(f"Project ID: {workflow['project_id']}")
            print(f"Business Type: {workflow['requirements_analysis']['business_type']}")
            print(f"App Type: {workflow['app_architecture']['app_overview']['app_type']}")
            print(f"Total Screens: {len(workflow['app_architecture']['screens_structure'])}")
            print(f"Development Phases: {len(workflow['development_roadmap']['development_roadmap']['milestones'])}")
            print(f"Saved to: {filename}")
            
        except Exception as e:
            print(f"‚ùå Error: {e}")

if __name__ == "__main__":
    main()