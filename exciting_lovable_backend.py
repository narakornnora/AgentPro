#!/usr/bin/env python3
"""
üöÄ Lovable Clone - Exciting AI App Generator
‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å Chat ‡∏û‡∏£‡πâ‡∏≠‡∏° Effects ‡∏ô‡πà‡∏≤‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏ï‡πâ‡∏ô!
"""
import os
import json
import asyncio
import uuid
import time
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List, Optional

from fastapi import FastAPI, WebSocket, WebSocketDisconnect, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse, FileResponse, HTMLResponse
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel

# Real OpenAI Integration  
try:
    from openai import OpenAI
    OPENAI_AVAILABLE = True
except ImportError:
    OPENAI_AVAILABLE = False

class RealAI:
    """Real OpenAI AI integration with fallback"""
    
    def __init__(self, api_key: str = None):
        self.api_key = api_key or os.getenv('OPENAI_API_KEY')
        if OPENAI_AVAILABLE and self.api_key:
            self.client = OpenAI(api_key=self.api_key)
            self.use_real_ai = True
        else:
            self.use_real_ai = False
            print("ü§ñ Using demo mode - set OPENAI_API_KEY for real AI")
        self.conversation_count = 0
    
    def chat_decide(self, messages: List[Dict]) -> Dict[str, Any]:
        """‡πÉ‡∏ä‡πâ OpenAI ‡∏à‡∏£‡∏¥‡∏á ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏à‡∏∞‡∏ñ‡∏≤‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ"""
        self.conversation_count += 1
        
        if not self.use_real_ai:
            # Demo mode
            user_msg = messages[-1]['content'].lower()
            
            if any(word in user_msg for word in ['todo', 'task', '‡∏á‡∏≤‡∏ô', '‡∏ó‡∏≥']):
                return {
                    "action": "build_app",
                    "message": "‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ Todo List ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏¢ üöÄ",
                    "requirements": {
                        "app_type": "todo_app",
                        "features": ["‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô", "‡∏•‡∏ö‡∏á‡∏≤‡∏ô", "‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏™‡∏£‡πá‡∏à"],
                        "ui": "modern"
                    }
                }
            elif any(word in user_msg for word in ['shop', '‡∏£‡πâ‡∏≤‡∏ô', '‡∏Ç‡∏≤‡∏¢', '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤']):
                return {
                    "action": "build_app", 
                    "message": "‡πÄ‡∏¢‡∏¥‡πà‡∏°! ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÉ‡∏´‡πâ üõçÔ∏è",
                    "requirements": {
                        "app_type": "shop_app",
                        "features": ["‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤", "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"],
                        "ui": "ecommerce"
                    }
                }
            else:
                return {
                    "action": "ask_question",
                    "message": "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ! ‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏â‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞? ‡πÄ‡∏ä‡πà‡∏ô Todo List, ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤, ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏≠‡∏õ‡∏≠‡∏∑‡πà‡∏ô‡πÜ üòä"
                }
        
        try:
            # ‡πÉ‡∏ä‡πâ OpenAI ‡∏à‡∏£‡∏¥‡∏á
            system_prompt = """‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢ AI ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à:
1. ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏° ‡πÉ‡∏´‡πâ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á 1 ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
2. ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏≠‡πÅ‡∏•‡πâ‡∏ß ‡∏ï‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ action: "build_app" ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏≠‡∏õ

‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON:
{
    "action": "ask_question" ‡∏´‡∏£‡∏∑‡∏≠ "build_app", 
    "message": "‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢",
    "requirements": {...} (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ)
}"""
            
            response = self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": system_prompt},
                    *messages
                ],
                temperature=0.7
            )
            
            content = response.choices[0].message.content
            
            try:
                # ‡∏•‡∏≠‡∏á‡πÅ‡∏¢‡∏Å JSON ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                if '```json' in content:
                    json_part = content.split('```json')[1].split('```')[0]
                elif '{' in content:
                    json_part = content[content.find('{'):content.rfind('}')+1]
                else:
                    json_part = content
                    
                result = json.loads(json_part)
                return result
            except:
                # ‡∏ñ‡πâ‡∏≤ parse JSON ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥
                return {
                    "action": "ask_question",
                    "message": content
                }
                
        except Exception as e:
            print(f"OpenAI Error: {e}")
            return {
                "action": "ask_question", 
                "message": "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ ‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ‡∏≠‡∏∞‡πÑ‡∏£‡∏Ñ‡∏∞?"
            }
    
    def generate_plan(self, requirements: Dict) -> Dict:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤"""
        return {
            "app_name": "Amazing App",
            "description": "‡πÅ‡∏≠‡∏õ‡∏™‡∏∏‡∏î‡πÄ‡∏à‡πã‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ AI",
            "database_schema": [
                {
                    "table": "users",
                    "fields": [
                        {"name": "id", "type": "INTEGER PRIMARY KEY"},
                        {"name": "name", "type": "TEXT NOT NULL"},
                        {"name": "email", "type": "TEXT UNIQUE"}
                    ]
                },
                {
                    "table": "items", 
                    "fields": [
                        {"name": "id", "type": "INTEGER PRIMARY KEY"},
                        {"name": "title", "type": "TEXT NOT NULL"},
                        {"name": "price", "type": "REAL"}
                    ]
                }
            ],
            "api_endpoints": [
                {"method": "GET", "path": "/api/users", "description": "‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"},
                {"method": "POST", "path": "/api/users", "description": "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà"},
                {"method": "GET", "path": "/api/items", "description": "‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"}
            ]
        }
    
    def generate_code(self, file_type: str, plan: Dict) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î"""
        if file_type == "database":
            return '''import sqlite3
import os

class Database:
    def __init__(self, db_name="app.db"):
        self.db_name = db_name
        self.init_database()
    
    def init_database(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á users
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                email TEXT UNIQUE NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á items
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS items (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                title TEXT NOT NULL,
                description TEXT,
                price REAL DEFAULT 0.0,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        cursor.execute("SELECT COUNT(*) FROM users")
        if cursor.fetchone()[0] == 0:
            sample_users = [
                ("‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ", "somchai@email.com"),
                ("‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°", "somying@email.com"),
                ("‡∏ö‡∏≠‡∏ö ‡∏ô‡∏±‡∏Å‡∏û‡∏±‡∏í‡∏ô‡∏≤", "bob@email.com")
            ]
            cursor.executemany(
                "INSERT INTO users (name, email) VALUES (?, ?)", 
                sample_users
            )
            
        cursor.execute("SELECT COUNT(*) FROM items")
        if cursor.fetchone()[0] == 0:
            sample_items = [
                ("‡∏Å‡∏≤‡πÅ‡∏ü‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤‡πÇ‡∏ô", "‡∏Å‡∏≤‡πÅ‡∏ü‡∏î‡∏≥‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏±‡∏ô", 45.0),
                ("‡∏•‡∏≤‡πÄ‡∏ï‡πâ", "‡∏Å‡∏≤‡πÅ‡∏ü‡∏ô‡∏°‡∏™‡∏∏‡∏î‡∏≠‡∏£‡πà‡∏≠‡∏¢", 55.0),
                ("‡πÄ‡∏Ñ‡πâ‡∏Å‡∏ä‡πá‡∏≠‡∏Å‡πÇ‡∏Å‡πÅ‡∏•‡∏ï", "‡πÄ‡∏Ñ‡πâ‡∏Å‡∏´‡∏ß‡∏≤‡∏ô‡∏°‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô", 75.0)
            ]
            cursor.executemany(
                "INSERT INTO items (title, description, price) VALUES (?, ?, ?)",
                sample_items
            )
        
        conn.commit()
        conn.close()
        print("‚úÖ Database initialized successfully!")

if __name__ == "__main__":
    db = Database()
    print("üóÑÔ∏è Database setup complete!")'''
            
        elif file_type == "backend":
            return '''from flask import Flask, request, jsonify, render_template
from flask_cors import CORS
import sqlite3
import json
from datetime import datetime

app = Flask(__name__)
CORS(app)

def get_db_connection():
    """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    conn = sqlite3.connect('app.db')
    conn.row_factory = sqlite3.Row
    return conn

@app.route('/')
def home():
    """‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å"""
    return render_template('index.html')

@app.route('/api/users', methods=['GET'])
def get_users():
    """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    conn = get_db_connection()
    users = conn.execute('SELECT * FROM users ORDER BY created_at DESC').fetchall()
    conn.close()
    
    return jsonify([dict(user) for user in users])

@app.route('/api/users', methods=['POST'])
def add_user():
    """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà"""
    data = request.get_json()
    
    if not data or 'name' not in data or 'email' not in data:
        return jsonify({'error': '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡πÄ‡∏°‡∏•'}), 400
    
    conn = get_db_connection()
    try:
        conn.execute(
            'INSERT INTO users (name, email) VALUES (?, ?)',
            (data['name'], data['email'])
        )
        conn.commit()
        conn.close()
        return jsonify({'message': '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'}), 201
    except sqlite3.IntegrityError:
        return jsonify({'error': '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß'}), 400

@app.route('/api/items', methods=['GET'])
def get_items():
    """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    conn = get_db_connection()
    items = conn.execute('SELECT * FROM items ORDER BY created_at DESC').fetchall()
    conn.close()
    
    return jsonify([dict(item) for item in items])

@app.route('/api/items', methods=['POST'])
def add_item():
    """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà"""
    data = request.get_json()
    
    if not data or 'title' not in data:
        return jsonify({'error': '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'}), 400
    
    conn = get_db_connection()
    conn.execute(
        'INSERT INTO items (title, description, price) VALUES (?, ?, ?)',
        (data['title'], data.get('description', ''), data.get('price', 0.0))
    )
    conn.commit()
    conn.close()
    
    return jsonify({'message': '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'}), 201

@app.route('/api/health')
def health_check():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö"""
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'message': 'API ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥'
    })

if __name__ == '__main__':
    print("üöÄ Starting Flask API server...")
    print("üìç Server: http://localhost:5000")
    app.run(host='0.0.0.0', port=5000, debug=True)'''
        
        elif file_type == "frontend":
            app_type = plan.get('app_type', 'todo_app')
            
            if app_type == 'shop_app':
                return '''<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ÔøΩÔ∏è ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ AI</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }
        .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
        .header {
            text-align: center;
            color: white;
            margin-bottom: 40px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        .header h1 { font-size: 3em; margin-bottom: 10px; }
        .header p { font-size: 1.2em; opacity: 0.9; }
        
        .products-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin: 40px 0;
        }
        
        .product-card {
            background: white;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        
        .product-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 20px 40px rgba(0,0,0,0.3);
        }
        
        .product-title {
            font-size: 1.5em;
            color: #667eea;
            margin-bottom: 10px;
            font-weight: bold;
        }
        
        .product-description {
            color: #666;
            margin-bottom: 15px;
            line-height: 1.5;
        }
        
        .product-price {
            font-size: 1.8em;
            color: #e74c3c;
            font-weight: bold;
            margin-bottom: 15px;
        }
        
        .add-to-cart {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 1em;
            font-weight: bold;
            transition: all 0.3s ease;
            width: 100%;
        }
        
        .add-to-cart:hover {
            transform: scale(1.05);
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
        }
        
        .cart-info {
            position: fixed;
            top: 20px;
            right: 20px;
            background: #2ecc71;
            color: white;
            padding: 15px 20px;
            border-radius: 25px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            font-weight: bold;
        }
        
        .loading {
            text-align: center;
            color: white;
            font-size: 1.2em;
            margin: 40px 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üõçÔ∏è ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå</h1>
            <p>‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ AI - ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á!</p>
        </div>
        
        <div class="cart-info">
            üõí ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤: <span id="cart-count">0</span> ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        </div>
        
        <div id="loading" class="loading">
            ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤... ‚è≥
        </div>
        
        <div id="products-container" class="products-grid" style="display:none;">
        </div>
    </div>

    <script>
        let cart = [];
        
        async function loadProducts() {
            try {
                const response = await fetch('/api/items');
                const products = await response.json();
                
                const container = document.getElementById('products-container');
                const loading = document.getElementById('loading');
                
                if (products && products.length > 0) {
                    container.innerHTML = products.map(product => `
                        <div class="product-card">
                            <div class="product-title">${product.title}</div>
                            <div class="product-description">${product.description || '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏î‡∏µ'}</div>
                            <div class="product-price">‡∏ø${product.price}</div>
                            <button class="add-to-cart" onclick="addToCart(${product.id}, '${product.title}', ${product.price})">
                                ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ üõí
                            </button>
                        </div>
                    `).join('');
                } else {
                    container.innerHTML = `
                        <div style="grid-column: 1/-1; text-align: center; color: white;">
                            <h2>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h2>
                            <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤...</p>
                        </div>
                    `;
                }
                
                loading.style.display = 'none';
                container.style.display = 'grid';
                
            } catch (error) {
                console.error('Error loading products:', error);
                document.getElementById('loading').innerHTML = '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ';
            }
        }
        
        function addToCart(id, title, price) {
            cart.push({id, title, price});
            updateCartDisplay();
            
            // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            const button = event.target;
            const originalText = button.innerHTML;
            button.innerHTML = '‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß!';
            button.style.background = '#2ecc71';
            
            setTimeout(() => {
                button.innerHTML = originalText;
                button.style.background = 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)';
            }, 1000);
        }
        
        function updateCartDisplay() {
            document.getElementById('cart-count').textContent = cart.length;
        }
        
        // ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°
        document.addEventListener('DOMContentLoaded', loadProducts);
    </script>
</body>
</html>'''
            else:
                # Default: Todo App
                return '''<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>‚úÖ Todo List - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ AI</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }
        .container { max-width: 800px; margin: 0 auto; padding: 20px; }
        .header {
            text-align: center;
            color: white;
            margin-bottom: 40px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        .header h1 { font-size: 3em; margin-bottom: 10px; }
        .header p { font-size: 1.2em; opacity: 0.9; }
        
        .todo-form {
            background: white;
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            margin-bottom: 30px;
        }
        
        .input-group {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        }
        
        .todo-input {
            flex: 1;
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 1em;
        }
        
        .add-btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1em;
            font-weight: bold;
            transition: all 0.3s ease;
        }
        
        .add-btn:hover {
            transform: scale(1.05);
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
        }
        
        .todos-container {
            background: white;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        }
        
        .todo-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 15px;
            border-bottom: 1px solid #eee;
            transition: all 0.3s ease;
        }
        
        .todo-item:hover {
            background: #f8f9fa;
        }
        
        .todo-text {
            flex: 1;
            font-size: 1.1em;
        }
        
        .todo-actions {
            display: flex;
            gap: 10px;
        }
        
        .complete-btn, .delete-btn {
            padding: 8px 16px;
            border: none;
            border-radius: 20px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.3s ease;
        }
        
        .complete-btn {
            background: #2ecc71;
            color: white;
        }
        
        .delete-btn {
            background: #e74c3c;
            color: white;
        }
        
        .complete-btn:hover, .delete-btn:hover {
            transform: scale(1.1);
        }
        
        .completed {
            text-decoration: line-through;
            opacity: 0.6;
        }
        
        .empty-state {
            text-align: center;
            color: #666;
            padding: 40px;
            font-size: 1.2em;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>‚úÖ Todo List</h1>
            <p>‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ AI - ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á!</p>
        </div>
        
        <div class="todo-form">
            <div class="input-group">
                <input type="text" id="todoInput" class="todo-input" placeholder="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà...">
                <button onclick="addTodo()" class="add-btn">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô ‚ûï</button>
            </div>
        </div>
        
        <div class="todos-container">
            <div id="todosContainer">
                <div class="empty-state">
                    ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì! üöÄ
                </div>
            </div>
        </div>
    </div>

    <script>
        let todos = [];
        let nextId = 1;
        
        function addTodo() {
            const input = document.getElementById('todoInput');
            const text = input.value.trim();
            
            if (text) {
                todos.push({
                    id: nextId++,
                    text: text,
                    completed: false
                });
                
                input.value = '';
                renderTodos();
                
                // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                input.style.background = '#d4edda';
                setTimeout(() => {
                    input.style.background = '';
                }, 500);
            }
        }
        
        function toggleTodo(id) {
            const todo = todos.find(t => t.id === id);
            if (todo) {
                todo.completed = !todo.completed;
                renderTodos();
            }
        }
        
        function deleteTodo(id) {
            todos = todos.filter(t => t.id !== id);
            renderTodos();
        }
        
        function renderTodos() {
            const container = document.getElementById('todosContainer');
            
            if (todos.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì! üöÄ
                    </div>
                `;
                return;
            }
            
            container.innerHTML = todos.map(todo => `
                <div class="todo-item">
                    <div class="todo-text ${todo.completed ? 'completed' : ''}">${todo.text}</div>
                    <div class="todo-actions">
                        <button class="complete-btn" onclick="toggleTodo(${todo.id})">
                            ${todo.completed ? '‚Ü©Ô∏è ‡πÄ‡∏•‡∏¥‡∏Å‡∏ó‡∏≥' : '‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à'}
                        </button>
                        <button class="delete-btn" onclick="deleteTodo(${todo.id})">
                            üóëÔ∏è ‡∏•‡∏ö
                        </button>
                    </div>
                </div>
            `).join('');
        }
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î Enter
        document.getElementById('todoInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                addTodo();
            }
        });
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        setTimeout(() => {
            todos.push(
                {id: nextId++, text: '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô HTML, CSS, JavaScript', completed: false},
                {id: nextId++, text: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Ñ‡πÅ‡∏£‡∏Å', completed: true},
                {id: nextId++, text: '‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡∏á‡∏≤‡∏ô‡∏™‡∏π‡πà‡πÇ‡∏•‡∏Å', completed: false}
            );
            renderTodos();
        }, 1000);
    </script>
</body>
</html>'''
            text-shadow: 0 2px 10px rgba(0,0,0,0.3);
        }
        
        .content {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            margin-bottom: 40px;
        }
        
        .card {
            background: white;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        }
        
        .card h2 {
            color: #667eea;
            margin-bottom: 20px;
            font-size: 1.8em;
        }
        
        .user-list, .item-list {
            max-height: 300px;
            overflow-y: auto;
        }
        
        .user-item, .item-card {
            background: #f8f9fa;
            padding: 15px;
            margin: 10px 0;
            border-radius: 8px;
            border-left: 4px solid #667eea;
        }
        
        .form-group {
            margin-bottom: 15px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        
        .form-group input {
            width: 100%;
            padding: 10px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 16px;
        }
        
        .form-group input:focus {
            outline: none;
            border-color: #667eea;
        }
        
        .btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            font-weight: bold;
            transition: all 0.3s ease;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }
        
        .price {
            color: #28a745;
            font-weight: bold;
            font-size: 1.2em;
        }
        
        .footer {
            text-align: center;
            color: white;
            padding: 20px;
            opacity: 0.8;
        }
        
        @media (max-width: 768px) {
            .content {
                grid-template-columns: 1fr;
            }
            
            .header h1 {
                font-size: 2em;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üöÄ Amazing App</h1>
            <p>‡πÅ‡∏≠‡∏õ‡∏™‡∏∏‡∏î‡πÄ‡∏à‡πã‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ AI ‡πÉ‡∏ô 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ!</p>
        </div>
        
        <div class="content">
            <div class="card">
                <h2>üë• ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</h2>
                <div id="userList" class="user-list">
                    <div class="user-item">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</div>
                </div>
                
                <h3 style="margin-top: 20px;">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà</h3>
                <div class="form-group">
                    <label>‡∏ä‡∏∑‡πà‡∏≠:</label>
                    <input type="text" id="userName" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ">
                </div>
                <div class="form-group">
                    <label>‡∏≠‡∏µ‡πÄ‡∏°‡∏•:</label>
                    <input type="email" id="userEmail" placeholder="‡∏≠‡∏µ‡πÄ‡∏°‡∏•">
                </div>
                <button class="btn" onclick="addUser()">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</button>
            </div>
            
            <div class="card">
                <h2>üì¶ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</h2>
                <div id="itemList" class="item-list">
                    <div class="item-card">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</div>
                </div>
                
                <h3 style="margin-top: 20px;">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà</h3>
                <div class="form-group">
                    <label>‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:</label>
                    <input type="text" id="itemTitle" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤">
                </div>
                <div class="form-group">
                    <label>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</label>
                    <input type="text" id="itemDescription" placeholder="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î">
                </div>
                <div class="form-group">
                    <label>‡∏£‡∏≤‡∏Ñ‡∏≤:</label>
                    <input type="number" id="itemPrice" placeholder="‡∏£‡∏≤‡∏Ñ‡∏≤">
                </div>
                <button class="btn" onclick="addItem()">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</button>
            </div>
        </div>
        
        <div class="footer">
            <p>‚ú® ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ Lovable Clone AI - ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</p>
            <p>üïê ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á: 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ | üìä Database + API + Frontend ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</p>
        </div>
    </div>

    <script>
        // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        document.addEventListener('DOMContentLoaded', function() {
            loadUsers();
            loadItems();
        });

        async function loadUsers() {
            try {
                const response = await fetch('/api/users');
                const users = await response.json();
                
                const userList = document.getElementById('userList');
                if (users.length === 0) {
                    userList.innerHTML = '<div class="user-item">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</div>';
                } else {
                    userList.innerHTML = users.map(user => 
                        `<div class="user-item">
                            <strong>${user.name}</strong><br>
                            üìß ${user.email}<br>
                            <small>‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°: ${new Date(user.created_at).toLocaleDateString('th-TH')}</small>
                        </div>`
                    ).join('');
                }
            } catch (error) {
                console.error('Error loading users:', error);
            }
        }

        async function loadItems() {
            try {
                const response = await fetch('/api/items');
                const items = await response.json();
                
                const itemList = document.getElementById('itemList');
                if (items.length === 0) {
                    itemList.innerHTML = '<div class="item-card">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</div>';
                } else {
                    itemList.innerHTML = items.map(item => 
                        `<div class="item-card">
                            <strong>${item.title}</strong><br>
                            ${item.description}<br>
                            <span class="price">‡∏ø${item.price}</span>
                        </div>`
                    ).join('');
                }
            } catch (error) {
                console.error('Error loading items:', error);
            }
        }

        async function addUser() {
            const name = document.getElementById('userName').value;
            const email = document.getElementById('userEmail').value;
            
            if (!name || !email) {
                alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡πÄ‡∏°‡∏•');
                return;
            }
            
            try {
                const response = await fetch('/api/users', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ name, email })
                });
                
                if (response.ok) {
                    document.getElementById('userName').value = '';
                    document.getElementById('userEmail').value = '';
                    loadUsers();
                    alert('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
                } else {
                    const error = await response.json();
                    alert(error.error);
                }
            } catch (error) {
                console.error('Error adding user:', error);
                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
            }
        }

        async function addItem() {
            const title = document.getElementById('itemTitle').value;
            const description = document.getElementById('itemDescription').value;
            const price = parseFloat(document.getElementById('itemPrice').value) || 0;
            
            if (!title) {
                alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤');
                return;
            }
            
            try {
                const response = await fetch('/api/items', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ title, description, price })
                });
                
                if (response.ok) {
                    document.getElementById('itemTitle').value = '';
                    document.getElementById('itemDescription').value = '';
                    document.getElementById('itemPrice').value = '';
                    loadItems();
                    alert('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
                } else {
                    alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
                }
            } catch (error) {
                console.error('Error adding item:', error);
                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
            }
        }
    </script>
</body>
</html>'''
        
        return "# Mock code generated"

# Configuration
ROOT_DIR = Path("C:/agent")
GENERATED_DIR = ROOT_DIR / "generated_apps"
GENERATED_DIR.mkdir(parents=True, exist_ok=True)

# FastAPI App
app = FastAPI(title="Lovable Clone - Exciting Edition", description="üöÄ AI App Generator with Exciting Effects!")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Models
class ChatMessage(BaseModel):
    message: str
    session_id: Optional[str] = None

# Global instances
real_ai = RealAI()
active_sessions = {}
websocket_connections = {}

class ExcitingLovableAI:
    """AI Engine ‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏ï‡πâ‡∏ô!"""
    
    def __init__(self):
        self.sessions = {}
    
    async def chat(self, message: str, session_id: str) -> Dict[str, Any]:
        """‡πÅ‡∏ä‡∏ó‡∏Å‡∏±‡∏ö AI ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏≤‡∏°‡∏ï‡πà‡∏≠"""
        
        if session_id not in self.sessions:
            self.sessions[session_id] = {
                'messages': [],
                'requirements': {},
                'status': 'chatting'
            }
        
        session = self.sessions[session_id]
        session['messages'].append({"role": "user", "content": message})
        
        # ‡πÉ‡∏ä‡πâ Mock AI ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
        decision = real_ai.chat_decide(session['messages'])
        
        if decision['action'] == 'build_app':
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ
            session['status'] = 'building'
            session['requirements'] = decision['requirements']
            return {
                'type': 'start_building',
                'message': decision['message'],
                'requirements': decision['requirements']
            }
        else:
            # ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡πà‡∏≠
            session['messages'].append({"role": "assistant", "content": decision['message']})
            return {
                'type': 'question',
                'message': decision['message'],
                'confidence': decision.get('confidence', 0.5)
            }
    
    async def build_app(self, requirements: Dict[str, Any], session_id: str, websocket: WebSocket = None) -> Dict[str, Any]:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ‡∏à‡∏£‡∏¥‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏° exciting effects"""
        
        app_id = f"app_{uuid.uuid4().hex[:8]}"
        app_dir = GENERATED_DIR / app_id
        app_dir.mkdir(exist_ok=True)
        
        try:
            # ‡∏™‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ exciting
            await self._send_exciting_status(websocket, "üéØ", "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£...")
            await asyncio.sleep(1)
            
            # 1. AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô
            plan = real_ai.generate_plan(requirements)
            
            await self._send_exciting_status(websocket, "üß†", "AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡∏Å‡∏£‡∏£‡∏°...")
            await asyncio.sleep(1)
            
            # 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            await self._send_exciting_status(websocket, "üóÑÔ∏è", "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö real-time...")
            database_code = real_ai.generate_code("database", plan)
            await self._create_file_with_typing(websocket, "database.py", database_code, app_dir)
            
            # 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á Backend
            await self._send_exciting_status(websocket, "üîß", "‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô API Backend ‡∏î‡πâ‡∏ß‡∏¢ Flask...")
            backend_code = real_ai.generate_code("backend", plan)
            await self._create_file_with_typing(websocket, "app.py", backend_code, app_dir)
            
            # 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á Frontend
            await self._send_exciting_status(websocket, "üé®", "‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö Frontend ‡∏™‡∏∏‡∏î‡∏™‡∏ß‡∏¢...")
            frontend_code = real_ai.generate_code("frontend", plan)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á templates directory
            templates_dir = app_dir / "templates"
            templates_dir.mkdir(exist_ok=True)
            await self._create_file_with_typing(websocket, "index.html", frontend_code, templates_dir)
            
            # 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏£‡∏¥‡∏°
            await self._send_exciting_status(websocket, "üì¶", "‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô...")
            await self._create_extras(app_dir, plan)
            
            await self._send_exciting_status(websocket, "‚úÖ", "‡πÅ‡∏≠‡∏õ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! üéâ")
            
            return {
                'app_id': app_id,
                'app_path': str(app_dir),
                'plan': plan,
                'files_created': ['database.py', 'app.py', 'templates/index.html', 'requirements.txt', 'start.bat'],
                'status': 'completed'
            }
            
        except Exception as e:
            await self._send_exciting_status(websocket, "‚ùå", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
            raise
    
    async def _send_exciting_status(self, websocket: WebSocket, icon: str, status: str):
        """‡∏™‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏ö‡∏ö exciting"""
        if websocket:
            try:
                await websocket.send_json({
                    'type': 'exciting_status',
                    'icon': icon,
                    'status': status,
                    'timestamp': datetime.now().isoformat()
                })
            except:
                pass
    
    async def _create_file_with_typing(self, websocket: WebSocket, filename: str, content: str, directory: Path):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏£‡πâ‡∏≠‡∏° typing effect"""
        if websocket:
            try:
                await websocket.send_json({
                    'type': 'file_typing_start',
                    'filename': filename,
                    'total_chars': len(content)
                })
                
                # ‡∏™‡πà‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô
                chunk_size = 50
                for i in range(0, len(content), chunk_size):
                    chunk = content[i:i + chunk_size]
                    await websocket.send_json({
                        'type': 'file_typing_chunk',
                        'filename': filename,
                        'chunk': chunk,
                        'progress': (i + chunk_size) / len(content)
                    })
                    await asyncio.sleep(0.03)  # 30ms delay ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö typing effect
                
                await websocket.send_json({
                    'type': 'file_typing_complete',
                    'filename': filename,
                    'content': content
                })
                
            except:
                pass
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á
        file_path = directory / filename
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
    
    async def _create_extras(self, app_dir: Path, plan: Dict):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏£‡∏¥‡∏°"""
        
        # requirements.txt
        requirements_content = """flask
flask-cors
"""
        req_file = app_dir / "requirements.txt"
        with open(req_file, 'w', encoding='utf-8') as f:
            f.write(requirements_content)
        
        # start.bat
        start_content = f"""@echo off
echo üöÄ Starting {plan.get('app_name', 'Amazing App')}...
echo üì¶ Installing dependencies...
pip install -r requirements.txt

echo üóÑÔ∏è Setting up database...
python database.py

echo üåü Starting web server...
echo üìç Open: http://localhost:5000
python app.py
"""
        start_file = app_dir / "start.bat"
        with open(start_file, 'w', encoding='utf-8') as f:
            f.write(start_content)
        
        # README.md
        readme_content = f"""# üöÄ {plan.get('app_name', 'Amazing App')}

{plan.get('description', '‡πÅ‡∏≠‡∏õ‡∏™‡∏∏‡∏î‡πÄ‡∏à‡πã‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ AI')}

## ‚ú® Features
- üóÑÔ∏è SQLite Database
- üîß Flask REST API  
- üé® Beautiful Frontend
- üì± Responsive Design

## üöÄ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏£‡∏±‡∏ô

### ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡πÉ‡∏ä‡πâ start.bat (‡∏á‡πà‡∏≤‡∏¢‡∏™‡∏∏‡∏î)
```
‡∏î‡∏±‡∏ö‡πÄ‡∏ö‡∏¥‡∏•‡∏Ñ‡∏•‡∏¥‡∏Å start.bat
```

### ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡∏£‡∏±‡∏ô‡πÄ‡∏≠‡∏á
```bash
# 1. ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies
pip install -r requirements.txt

# 2. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
python database.py

# 3. ‡∏£‡∏±‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
python app.py
```

### üåê ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡πÄ‡∏ã‡∏≠‡∏£‡πå
http://localhost:5000

## üéØ API Endpoints
- `GET /api/users` - ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
- `POST /api/users` - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
- `GET /api/items` - ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
- `POST /api/items` - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤

## üîß Tech Stack
- **Backend:** Flask + SQLite
- **Frontend:** HTML + CSS + JavaScript
- **Database:** SQLite
- **Style:** Responsive CSS Grid

---
## ‚ö° ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ Lovable Clone AI
üïê ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á: 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ | ü§ñ AI-Powered | ‚ú® Ready to Use
"""
        readme_file = app_dir / "README.md"
        with open(readme_file, 'w', encoding='utf-8') as f:
            f.write(readme_content)

# Global AI instance
exciting_ai = ExcitingLovableAI()

@app.get("/")
async def root():
    """Serve the exciting interface"""
    interface_file = ROOT_DIR / "lovable_split_interface.html"
    if interface_file.exists():
        return FileResponse(str(interface_file))
    return {"message": "üöÄ Lovable Clone - Exciting Edition!", "status": "ready"}

@app.post("/chat")
async def chat_endpoint(message_request: ChatMessage):
    """Chat with exciting AI"""
    
    session_id = message_request.session_id or f"session_{uuid.uuid4().hex[:8]}"
    
    try:
        result = await exciting_ai.chat(message_request.message, session_id)
        result['session_id'] = session_id
        return result
        
    except Exception as e:
        return {
            'type': 'error',
            'message': f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}",
            'session_id': session_id
        }

@app.websocket("/ws/{session_id}")
async def websocket_endpoint(websocket: WebSocket, session_id: str):
    """WebSocket for exciting real-time updates"""
    await websocket.accept()
    websocket_connections[session_id] = websocket
    
    try:
        while True:
            # ‡∏£‡∏≠‡∏£‡∏±‡∏ö build request
            data = await websocket.receive_json()
            
            if data.get('action') == 'build_app':
                requirements = data.get('requirements', {})
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏£‡πâ‡∏≠‡∏° exciting effects
                result = await exciting_ai.build_app(requirements, session_id, websocket)
                
                # ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
                await websocket.send_json({
                    'type': 'app_completed',
                    'result': result
                })
    
    except WebSocketDisconnect:
        if session_id in websocket_connections:
            del websocket_connections[session_id]

@app.get("/apps")
async def list_apps():
    """List generated apps"""
    apps = []
    for app_dir in GENERATED_DIR.iterdir():
        if app_dir.is_dir():
            readme = app_dir / "README.md"
            if readme.exists():
                apps.append({
                    'id': app_dir.name,
                    'path': str(app_dir),
                    'created': datetime.fromtimestamp(app_dir.stat().st_mtime).isoformat()
                })
    
    return {"apps": apps}

@app.get("/test")
async def test():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö"""
    return {"message": "üöÄ Exciting Lovable Clone is working!", "status": "ready"}

if __name__ == "__main__":
    import uvicorn
    print("üöÄ Starting Exciting Lovable Clone AI...")
    print("‚ú® With amazing visual effects!")
    print("üìç Server: http://localhost:8006")
    uvicorn.run(app, host="0.0.0.0", port=8006)