#!/usr/bin/env python
"""
‡∏ó‡∏î‡∏™‡∏≠‡∏ö AI Code Generation ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô HTTP Server)
"""
import os
import sys
import json
import asyncio
from datetime import datetime
from pathlib import Path
from openai import OpenAI
from dotenv import load_dotenv

# Load environment
load_dotenv()

async def test_ai_generation_direct():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö AI ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á"""
    
    # Initialize OpenAI
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        print("‚ùå No OpenAI API Key found!")
        return False
    
    client = OpenAI(api_key=api_key)
    workspace = Path("C:/agent/direct_test_apps")
    workspace.mkdir(parents=True, exist_ok=True)
    
    print(f"üöÄ Testing Direct AI Generation")
    print(f"üîë API Key: {api_key[:10]}...")
    print(f"üìÅ Workspace: {workspace}")
    
    # Test 1: Mobile App Generation
    print("\nüì± Test 1: Mobile App Generation")
    print("-" * 50)
    
    mobile_prompt = """
‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô expert React Native developer ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ mobile ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á

User Request: ‡∏™‡∏£‡πâ‡∏≤‡∏á app ‡∏£‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡πÅ‡∏ü ‡∏ä‡∏∑‡πà‡∏≠ "Coffee House" ‡∏°‡∏µ ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏Å‡∏≤‡πÅ‡∏ü ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô

‡∏™‡∏£‡πâ‡∏≤‡∏á mobile app ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏ï‡∏≤‡∏° request ‡πÇ‡∏î‡∏¢:
1. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å prompt
2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á app ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°  
3. ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á ‡∏°‡∏µ navigation, state management
4. ‡πÉ‡∏ä‡πâ UI components ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡πÅ‡∏ü
5. ‡∏°‡∏µ error handling ‡πÅ‡∏•‡∏∞ loading states

‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON format:
{
    "app_name": "‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏õ",
    "description": "‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÅ‡∏≠‡∏õ", 
    "main_component": "‡πÇ‡∏Ñ‡πâ‡∏î App.tsx ‡∏´‡∏•‡∏±‡∏Å (‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)",
    "package_json": "package.json configuration",
    "additional_files": [
        {"filename": "screens/MenuScreen.tsx", "content": "‡πÇ‡∏Ñ‡πâ‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏°‡∏ô‡∏π"},
        {"filename": "screens/CartScreen.tsx", "content": "‡πÇ‡∏Ñ‡πâ‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤"}
    ]
}

‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡πâ‡∏≠‡∏á:
- ‡πÉ‡∏ä‡πâ TypeScript
- ‡∏°‡∏µ proper imports
- ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà mockup
- ‡∏°‡∏µ state management ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö cart
- responsive design
- ‡∏°‡∏µ‡∏™‡∏µ theme ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡πÅ‡∏ü
- ‡πÉ‡∏™‡πà comments ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ó‡∏¢
"""
    
    try:
        print("ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡πÉ‡∏´‡πâ AI ‡∏™‡∏£‡πâ‡∏≤‡∏á mobile app...")
        
        response = client.chat.completions.create(
            model="gpt-4o-mini",  # ‡πÉ‡∏ä‡πâ model ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤
            messages=[
                {"role": "system", "content": "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô expert mobile app developer ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"},
                {"role": "user", "content": mobile_prompt}
            ],
            max_tokens=3000,
            temperature=0.3
        )
        
        ai_response = response.choices[0].message.content.strip()
        print(f"üìù AI Response Length: {len(ai_response)} characters")
        
        # Parse JSON
        if ai_response.startswith('```json'):
            ai_response = ai_response.replace('```json', '').replace('```', '').strip()
        
        try:
            app_data = json.loads(ai_response)
            print("‚úÖ JSON Parsing successful!")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            app_name = app_data.get('app_name', 'mobile_app').replace(' ', '_')
            app_dir = workspace / f"{app_name}_{timestamp}"
            app_dir.mkdir(parents=True, exist_ok=True)
            
            files_created = 0
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á package.json
            if app_data.get('package_json'):
                package_file = app_dir / "package.json"
                with open(package_file, 'w', encoding='utf-8') as f:
                    if isinstance(app_data['package_json'], str):
                        f.write(app_data['package_json'])
                    else:
                        json.dump(app_data['package_json'], f, indent=2, ensure_ascii=False)
                files_created += 1
                print(f"üìÑ Created: package.json")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á App.tsx
            if app_data.get('main_component'):
                main_file = app_dir / "App.tsx"
                with open(main_file, 'w', encoding='utf-8') as f:
                    f.write(app_data['main_component'])
                files_created += 1
                print(f"üìÑ Created: App.tsx")
                
                # ‡πÅ‡∏™‡∏î‡∏á preview
                content = app_data['main_component']
                print(f"\nüì± App.tsx Preview:")
                print("=" * 60)
                print(content[:800] + "..." if len(content) > 800 else content)
                print("=" * 60)
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡πÅ‡∏ü
                coffee_keywords = ['‡∏Å‡∏≤‡πÅ‡∏ü', 'Coffee', 'coffee', '‡πÄ‡∏°‡∏ô‡∏π', 'Menu', '‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤', 'Cart', '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô']
                found_keywords = [kw for kw in coffee_keywords if kw in content]
                
                if found_keywords:
                    print(f"\n‚úÖ AI Customization Found: {found_keywords}")
                    print("üéØ CONFIRMED: AI ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡∏≤‡∏° requirements!")
                else:
                    print("\n‚ö†Ô∏è Generic template detected")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
            if app_data.get('additional_files'):
                for file_info in app_data['additional_files']:
                    file_path = app_dir / file_info['filename']
                    file_path.parent.mkdir(parents=True, exist_ok=True)
                    with open(file_path, 'w', encoding='utf-8') as f:
                        f.write(file_info['content'])
                    files_created += 1
                    print(f"üìÑ Created: {file_info['filename']}")
            
            print(f"\nüìä Mobile App Summary:")
            print(f"App Name: {app_data.get('app_name')}")
            print(f"Description: {app_data.get('description')}")
            print(f"Files Created: {files_created}")
            print(f"App Path: {app_dir}")
            
            if files_created > 0:
                print("üéâ Mobile App Generation SUCCESS!")
                mobile_success = True
            else:
                print("‚ùå Mobile App Generation FAILED!")
                mobile_success = False
            
        except json.JSONDecodeError as e:
            print(f"‚ùå JSON Parse Error: {e}")
            print(f"AI Response: {ai_response[:500]}...")
            mobile_success = False
        
    except Exception as e:
        print(f"‚ùå Mobile Generation Error: {e}")
        mobile_success = False
    
    # Test 2: Web App Generation
    print("\nüåê Test 2: Web App Generation")
    print("-" * 50)
    
    web_prompt = """
‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô expert web developer ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á web application ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á

User Request: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå ‡∏ä‡∏∑‡πà‡∏≠ "BookShop Online" ‡∏°‡∏µ gallery ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ shopping cart ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤

‡∏™‡∏£‡πâ‡∏≤‡∏á web application ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏ï‡∏≤‡∏° request ‡πÇ‡∏î‡∏¢:
1. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
2. ‡∏™‡∏£‡πâ‡∏≤‡∏á responsive web app
3. ‡πÉ‡∏ä‡πâ modern CSS ‡πÅ‡∏•‡∏∞ JavaScript
4. ‡∏°‡∏µ interactive features
5. ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà static

‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON format:
{
    "app_name": "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå",
    "description": "‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢",
    "index_html": "‡πÇ‡∏Ñ‡πâ‡∏î HTML ‡∏´‡∏•‡∏±‡∏Å (‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô)",
    "styles_css": "‡πÇ‡∏Ñ‡πâ‡∏î CSS (‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏° responsive)",
    "script_js": "‡πÇ‡∏Ñ‡πâ‡∏î JavaScript (interactive)"
}

‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ï‡πâ‡∏≠‡∏á:
- Responsive design
- Modern UI/UX ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
- Interactive features (search, cart)
- ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏ö‡∏ô browser
- ‡∏°‡∏µ book gallery
- ‡πÉ‡∏™‡πà comments ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ó‡∏¢
"""
    
    try:
        print("ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡πÉ‡∏´‡πâ AI ‡∏™‡∏£‡πâ‡∏≤‡∏á web app...")
        
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô expert web developer ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"},
                {"role": "user", "content": web_prompt}
            ],
            max_tokens=3000,
            temperature=0.3
        )
        
        ai_response = response.choices[0].message.content.strip()
        print(f"üìù Web AI Response Length: {len(ai_response)} characters")
        
        if ai_response.startswith('```json'):
            ai_response = ai_response.replace('```json', '').replace('```', '').strip()
        
        try:
            web_data = json.loads(ai_response)
            print("‚úÖ Web JSON Parsing successful!")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏ß‡πá‡∏ö
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            web_name = web_data.get('app_name', 'web_app').replace(' ', '_')
            web_dir = workspace / f"{web_name}_{timestamp}"
            web_dir.mkdir(parents=True, exist_ok=True)
            
            web_files_created = 0
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á index.html
            if web_data.get('index_html'):
                with open(web_dir / "index.html", 'w', encoding='utf-8') as f:
                    f.write(web_data['index_html'])
                web_files_created += 1
                print(f"üìÑ Created: index.html")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á styles.css
            if web_data.get('styles_css'):
                with open(web_dir / "styles.css", 'w', encoding='utf-8') as f:
                    f.write(web_data['styles_css'])
                web_files_created += 1
                print(f"üìÑ Created: styles.css")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á script.js
            if web_data.get('script_js'):
                with open(web_dir / "script.js", 'w', encoding='utf-8') as f:
                    f.write(web_data['script_js'])
                web_files_created += 1
                print(f"üìÑ Created: script.js")
            
            print(f"\nüìä Web App Summary:")
            print(f"App Name: {web_data.get('app_name')}")
            print(f"Description: {web_data.get('description')}")
            print(f"Files Created: {web_files_created}")
            print(f"Web Path: {web_dir}")
            
            if web_files_created > 0:
                print("üéâ Web App Generation SUCCESS!")
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á HTML
                html_content = web_data.get('index_html', '')
                if html_content:
                    print(f"\nüåê HTML Preview:")
                    print("=" * 60)
                    print(html_content[:600] + "..." if len(html_content) > 600 else html_content)
                    print("=" * 60)
                
                web_success = True
            else:
                print("‚ùå Web App Generation FAILED!")
                web_success = False
                
        except json.JSONDecodeError as e:
            print(f"‚ùå Web JSON Parse Error: {e}")
            print(f"Web AI Response: {ai_response[:500]}...")
            web_success = False
    
    except Exception as e:
        print(f"‚ùå Web Generation Error: {e}")
        web_success = False
    
    # Final Results
    print("\n" + "=" * 80)
    print("üèÜ FINAL TEST RESULTS:")
    print("=" * 80)
    print(f"üì± Mobile App Generation: {'‚úÖ SUCCESS' if mobile_success else '‚ùå FAILED'}")
    print(f"üåê Web App Generation: {'‚úÖ SUCCESS' if web_success else '‚ùå FAILED'}")
    
    if mobile_success or web_success:
        print("\nüéâ AI ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á ‡πÜ!")
        print("‚úÖ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà mockup - ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô")
        print("üöÄ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á chat interface ‡πÅ‡∏•‡πâ‡∏ß!")
        return True
    else:
        print("\n‚ùå AI Generation ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡πà‡∏≠")
        return False

if __name__ == "__main__":
    success = asyncio.run(test_ai_generation_direct())
    
    if success:
        print("\nüéØ ‡∏ï‡πà‡∏≠‡πÑ‡∏õ: ‡∏™‡∏£‡πâ‡∏≤‡∏á Chat Interface ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö AI")
    else:
        print("\n‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ AI generation ‡∏Å‡πà‡∏≠‡∏ô")